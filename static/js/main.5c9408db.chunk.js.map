{"version":3,"sources":["database/data sync /^/.//.*/.json$","styles/theme.js","ecs/util/index.js","ecs/managers/Manager.js","ecs/components/Description.js","ecs/components/index.js","ecs/Assemblages.js","ecs/index.js","ecs/managers/SceneManger.js","ecs/managers/DataManager.js","ecs/systems/System.js","ecs/systems/Room.js","ecs/util/Proper.js","ecs/systems/Sight.js","ecs/systems/Exits.js","ecs/util/dataToLoad.js","redux/reducers/worldReducer.js","redux/reducers/index.js","redux/actions/types.js","store.js","components/presentation/DisplayWindow.js","redux/actions/index.js","components/presentation/Description.js","components/presentation/Exits.js","components/provider/ExitsProvidor.js","components/provider/DisplayWindowProvider.js","components/provider/Updater.js","App.js","serviceWorker.js","database/schema.js","database/index.js","index.js"],"names":["map","./description.json","./room.json","./scene.json","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","Theme","colors","background","links","text","logger","tag","printOnly","this","only","i","prototype","log","_console","_len3","arguments","length","message","Array","_key3","console","apply","concat","validate","_len4","things","_key4","every","thing","undefined","asyncForEach","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","array","callback","index","wrap","_context","prev","next","stop","_x","_x2","Manager","managers","database","world","classCallCheck","Description","entity","Presence","room","Notable","Container","capacity","Openable","Containable","container","weight","Name","label","Portal","connectedEntity","direction","dir","link","backwardLink","Room","name","desc","createEntity","addComponent","addTag","systems","ces","SceneManager","sceneName","DataManager","get","catch","error","scene","roomMap","rooms_","description_","sent","_this","join","exits","pred","_","exit","obj","pipe","toPairs","filter","Rapply","fromPairs","forEachObjIndexed","roomInfo","roomName","inRoom","toRoom","collection","findOne","exec","System","dt","state","queryTag","presence","RoomSystem","currRoom","moveTo","events","hasComponent","getArticleInPlace","excludePlural","article","returnNoun","noun","getNoun","nlp","articles","getArticle","innerArticle","getToBe","toBe","pronouns","match","data","toLowerCase","plural","isPlural","returnNLP","parse","nouns","NoNounError","_Error","possibleConstructorReturn","getPrototypeOf","call","inherits","wrapNativeSuper","SightSystem","describeRoom","getCurrRoom","setState","actions","look","appendDescription","description","updatedDescription","entities","entitiesInRoom","describe","describeContainerContents","containerName","items","listContainerContents","openable","isOpen","fetchContainedEntities","item","queryComponents","child","containable","namePreferred","ExitSystem","exitsInRoom","portal","fn","_len","bound_args","_key","_len2","args","_key2","bind_trailing_args","startingLocation","Actor","exitNames","World","_ref$managers","_managers","Managers","_ref$systems","_systems","Systems","_ref$entities","Entities","instance","nano","manager","key","sys","forEach","loadScene","then","assign","update","isTriggered","takeAction","action","triggerEvent","event","initialState","getState","combineReducers","type","payload","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","DisplayWindow","props","react_default","createElement","className","children","Action","Root","styled","div","_templateObject","ul","Exits_templateObject","Exits","Exits_Root","onClick","handleClick","bind","ExitsProvidor","React","Component","connect","dispatch","DisplayWindowProvider","provider_ExitsProvidor","presentation_Description","Updater","time","lastTime","ReactAnimationFrame","App","styled_components_browser_esm","theme","es","App_Root","provider_Updater","provider_DisplayWindowProvider","App_templateObject","Boolean","location","hostname","collections","schema","version","properties","primary","rooms","uniqueItems","ref","N","optional","E","S","W","flags","hasEntered","default","required","dbPromise","_create","db","RxDB","require","adapter","Promise","all","colData","abrupt","_ref2","_callee2","_context2","loadDatabase","_ref3","_callee3","_context3","getLocal","fill","insertLocal","isTrue","insert","load","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c9408db.chunk.js","sourcesContent":["var map = {\n\t\"./description.json\": 201,\n\t\"./room.json\": 202,\n\t\"./scene.json\": 203\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 200;","const Theme = {\n    colors: {\n        background: \"#967bb6\",\n        links: \"#665d1e\",\n        text: \"#3a1f04\"\n    }\n}\n\nexport default Theme;","import { pipe, toPairs, fromPairs, filter, apply as Rapply } from 'ramda'\n/** Bind arguments starting after however many are passed in. */ \nexport function bind_trailing_args(fn, ...bound_args) {\n    return function(...args) {\n        return fn(...args, ...bound_args);\n    };\n}\n\nexport function logger(tag, printOnly){\n    this.only = printOnly;\n    this.tag = tag;\n    this.i = 0;\n}\nlogger.prototype.log = function(...message){\n    if(!this.only || (this.only && this.i === this.only))\n        console.log(\"tag: \", this.tag, \"i: \", this.i, ...message); \n    this.i++;\n}\n\n/**\n * Checks that all passed arguments are not null or undefined\n * @param  {...any} things \n */\nexport const validate = (...things) => {\n    return things.every((thing) => thing !== undefined && thing !== null);\n}\n\nexport const asyncForEach = async (array, callback) => {\n    for (let index = 0; index < array.length; index++) {\n      await callback(array[index], index, array);\n    }\n}\n\nexport const asyncObjForEach = async (obj, callback) => {\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            await callback(obj[key], key, obj);\n        }\n    }\n} \n\n/*** RAMDA **********************************/\nexport const filterWithKeys = (pred, obj) => pipe(\n    toPairs,\n    filter(Rapply(pred)),\n    fromPairs\n)(obj);","import {RxDatabase} from 'rxdb'\n//jsDoc\nimport SceneManager from './SceneManger';\n\nclass Manager {\n  /**\n   * Has access to outside resources\n   * @param {RxDatabase} database\n   * @param {object} managers\n   * @param {DataManager} managers.DataManager\n   * @param {SceneManager} managers.SceneManager\n   */\n  constructor(managers, database, world) {\n    this.managers = managers;\n    this.database = database\n    this.world = world;\n  }\n}\n\nexport default Manager","/**\n * Very simple state machine component that stores map of states to components\n * and current state.\n * @param {object} displayMap {...,stateName: {data: new type(), meta: {}}}\n * @param {string} entryPoint stateName to start on\n */\n/*\nexport default function Description(displayMap, entryPoint) {\n    this.map = displayMap;\n    this.currentState = entryPoint;\n    this.toDisplay;\n}\n*/\n\n/**\n * \n *\n * @export\n * @param {*} text\n */\nexport function Description(entity, text) {\n    this.text = text;\n}\n\nexport const types = {\n    /**\n     * As basic of a description as you can get. \n     * Displays the same description every time.\n     * @param {string} standard Standard description\n     */\n    basic: (standard) => {\n        this.standard = standard;\n    },\n\n    /**\n     * Descriptions meant to be displayed sequentially, as in a book. \n     * \n     * @param {[string]} pages An array of descriptions\n     */\n    flipbook: (pages) => {\n        this.pages = pages;\n        this.pageNum = -1;\n        this.done = false;\n    },\n\n    /**\n     * This description is meant to be used once in the game.\n     *\n     * @param {string} desc\n     */\n    once: (desc) =>{\n        this.standard = desc;\n        this.viewed = false;\n    },\n\n    /**\n     * The description displayed will depend on the in-game time.\n     *\n     * @param {object} times The map of time to description\n     * @param {string} standard Any missing times will use this description\n     */\n    timebased(times, standard) {\n        this.times = times;\n        this.standard = standard;\n    }\n}","/** Specifies that an entity physically exists in a room\n *  @param {Entity} room The room that the presence is located at */\nexport function Presence(entity, room) {\n    this.room = room;\n}\n\n/** Specifies that an entity is displayed in the room description\\\n *  *Note: can be used in conjunction with Description.inRoom* */\nexport function Notable(entity) {}\n\n/** Specifies that an entity can hold other entities\n * @param {number} capacity The max weight a container can hold */\nexport function Container(entity, capacity) {\n    this.capacity = capacity\n}\n\n/** Specifies that an entity can be opened */\nexport function Openable(entity) {}\n\n/** Specifies that this container is contained in another entity\n *  @param {Entity} container The container Entity\n *  @param {number} weight */\nexport function Containable(entity, container, weight) {\n    this.container = container;\n    this.weight = weight;\n}\n\n/** A label that the entity may be referred by\n *  @param {string} label The label */\nexport function Name(entity, label) {\n    this.label = label;\n}\n\n/** Connects an entity to another entity\n * @param {DIR} direction \n * @param {Entity} connectedEntity */\nexport function Portal(entity, container, connectedEntity, direction) {\n    this.dir = direction;\n    this.link = connectedEntity;\n    this.backwardLink = container;\n}\n","import { Description } from \"./components/Description\";\nimport { Name, Presence, Portal } from './components'\nimport { logger } from \"./util\";\n\nexport function Room (world, name, desc) {\n    return world.createEntity()\n    .addComponent(Name, name)\n    .addComponent(Description, desc)\n    .addTag('room')\n} \n\nexport function Player (world) {\n    return Actor(world, 'player', 'undefinedRoom')\n    .addTag('player')\n}\n\nexport function Actor (world, name, startingLocation) {\n    return world.createEntity()\n    .addComponent(Name, name)\n    .addComponent(Presence, startingLocation)\n    .addTag('actor')\n}\n\nexport function Exit (world, inRoom, toRoom, direction) {\n    return world.createEntity()\n    .addComponent(Name, toRoom.name.label)\n    .addComponent(Portal, inRoom, toRoom, direction)\n    .addTag('exit')\n} ","import nano from 'nano-ecs'\nimport { RxDatabase } from 'rxdb'\nimport { map, forEach, forEachObjIndexed } from 'ramda'\n\nimport { systems as Systems, entities as Entities, managers as Managers} from './util/dataToLoad'\nimport { logger, validate } from './util';\nimport System from './systems/System'\nimport Manager from './managers/Manager'\nimport './util/typeDef'\n\n//Initial State\nlet state = {\n    events: {\n        moveTo: \"Home\",\n        actions: {look: true}\n    },\n    world: {\n        description: \"\",\n        exitNames: []\n    }\n};\nlet systems;\nlet managers = {};\nlet ces;\n\n\nclass World {\n    static instance;\n    /**\n     * Initialize world with either passed or standard parameters\n     * @param {object} config\n     * @param {function} config.callback\n     * @param {[System]} config.systems \n     * @param {[Entity]} config.entities \n     * @param {[Manager]} config.managers\n     * @param {RxDatabase} config.database\n     */\n    constructor({database, callback, managers:_managers = Managers, systems:_systems = Systems, entities = Entities}){\n        if(!validate(database)) throw new Error(\"Database must be defined\");\n    \n        if(World.instance){\n            return World.instance;\n        }\n        //init\n        ces = nano();\n        World.instance = this;\n\n        console.log(\"AM LOAD New WOrld\")\n\n        //Load \n        forEachObjIndexed((manager, key) => {\n            managers[key] = new manager(managers, database, ces);\n        }, _managers)\n        systems = map(sys => new sys(managers, ces), _systems);\n        entities = forEach(e => e(ces), entities);\n        console.log(\"callback:\", callback);\n        //Load Scene\n        managers.SceneManager\n                .loadScene('town_edge')\n                .then(_ => {\n                    console.log(\"then, \",typeof callback==='function');\n                    if(typeof callback==='function')callback();}\n                )\n                .catch(error => console.log(\"ERROR:\", error.message))\n    }\n\n\n    static getState() {\n        return Object.assign({}, state);\n    }\n\n    /**\n     * Runs the update method of all the systems.\n     *\n     * @memberof World\n     * @param {number} dt The time since last update\n     */\n    static update = (dt) => {\n        systems.forEach(sys => {\n            if(sys.isTriggered(dt, state))\n                state = sys.update(dt, state)\n        });\n        //clean events\n        state.events = {actions: {}};\n    }\n\n    static takeAction = (action) => {\n        state.events.actions[action] = true;\n    }\n\n    static triggerEvent = (event, data) => {\n        state.events[event] = data;\n    }\n}\n\nexport default World\n\n","import { asyncForEach, filterWithKeys } from '../util'\nimport { forEach, forEachObjIndexed } from 'ramda'\nimport Manager from './Manager'\nimport { Room, Exit } from '../Assemblages';\n\nlet scene;\n//TODO: fix scene manager\nclass SceneManager extends Manager{\n  \n  async loadScene(sceneName) {\n    const scene = await this.managers\n                            .DataManager\n                            .get('scene', sceneName)\n                            .catch(error => console.log(\"ERROR:\", error.message))\n\n    //Load Rooms\n    let roomMap = {};\n    await asyncForEach(await scene.rooms_, async (room) => {\n      const desc = await room.description_;\n      roomMap[room.name] = {\n        room: Room(this.world, room.name, desc.text.join(\"\")),\n        exits: filterWithKeys((_, exit) => exit !== undefined, room.exits)\n      }\n    })\n\n    forEachObjIndexed((roomInfo, roomName) => {\n      forEachObjIndexed((exit, dir) => {\n         Exit(this.world, roomInfo.room, roomMap[exit].room, dir)\n      }, roomInfo.exits)\n    }, roomMap)\n    \n    console.log(\"After\");\n    return this;\n  }\n}\n\nexport default SceneManager","import Manager from \"./Manager\";\n\nclass DataManager extends Manager {\n  async get(collection, name) {\n    return this.database[collection]\n               .findOne(name)\n               .exec()\n               .catch(error => console.log(error.message))\n  } \n}\n\nexport default DataManager","import '../util/typeDef'\nclass System {\n    /**\n     * @param {Manager} managers\n     * @param {CES} world \n     */\n    constructor(managers, world){\n        this.managers = managers;\n        this.world = world;\n    }\n\n    update(dt, state) {\n        return state;\n    }\n\n    isTriggered(dt, state) {\n        return true;\n    }\n\n    //Common functions used across systems\n    /**\n     * Gets the room that the player is in\n     * @return {Entity} Room Entity*/\n    getCurrRoom(){\n        return this.world.queryTag('player')[0].presence.room;\n    }\n}\n\nexport default System","import System from './System';\nimport { Presence, Name } from \"../components\";\nimport { logger } from '../util';\n\nlet logs = new logger(\"Room System\");\nclass RoomSystem extends System {\n    update(dt, state) {\n        //Move player to correct room\n        this.currRoom = this.moveTo(this.world.queryTag('player')[0], state.events.moveTo);\n\n        return state;\n    }\n\n    isTriggered(dt, state){\n        return !!state.events.moveTo\n    }\n\n    moveTo(entity, roomName) {\n        //If an entity does not have a presence component it cannot be moved\n        if(!entity.hasComponent(Presence)) return false;\n\n        //get room\n        let room = this.world.queryTag('room').filter((room) => room.name.label === roomName);\n        entity.presence.room = room[0];\n\n        return room;\n    }\n}\n\nexport default RoomSystem\n\n\n","import nlp from 'compromise'\n\nexport const loadCustomNouns = (nouns) => {\n    nlp(\"\", nouns);\n}\n/**\n * get the correct article of the first occurring noun in the given text\n * @param {string} text Can be a single noun or a a sentence \n * @param {boolean} returnNoun flag to also return noun\n * @throws {NoNounError} Will throw an error if no noun is present\n */\nexport const getArticle = (text, returnNoun) => {\n    let noun = getNoun(text, true);\n    let article = noun.nlp.articles()[0].article;\n    return returnNoun?{article: article, noun:noun.noun}\n                     : article\n}\n\n/**\n * get the correct combo of noun and article\n * @param {string} text Can be a single noun or a a sentence \n * @param {boolean=} excludePlural Avoid awkward sentences like 'There are the necklaces in here'\n * @throws {NoNounError} Will throw an error if no noun is present\n */\nexport const getArticleInPlace = (text, excludePlural = false) => {\n    let article = getArticle(text, true);\n    let innerArticle = article.article + \" \";\n    if(excludePlural && article.article === 'the') innerArticle = \"\"; \n    return `${innerArticle}${article.noun}`;\n}\n\n/**\n * \n * @param {string} text \n * @param {boolean} returnNoun \n * @returns {boolean|{noun:string, isPlural:boolean}}\n */\nexport const getToBe = (text, returnNoun) => {\n    let toBe;\n\n    //Pronoun\n    let pronouns = nlp(text).match('#pronoun').data();\n    if(pronouns.length > 0){\n        let pronoun = pronouns[0].text.toLowerCase();\n        switch(pronoun){\n            case \"i\"   : toBe = \"am\"; break;\n            case \"you\" : \n            case \"we\"  :\n            case \"they\":\n                         toBe = \"are\"; break;\n            default    : toBe = \"is\";  \n        }\n        return returnNoun?{noun:pronouns[0].text, toBe:toBe}:toBe;\n    }\n\n    //Noun\n    let plural = isPlural(text, true);\n    toBe = plural.isPlural?\"are\":\"is\"\n    return returnNoun?{noun:plural.noun, toBe:toBe}:toBe;\n}\n\nexport const getToBeInPlace = (text) => {\n    let toBe = getToBe(text, true);\n    return `${toBe.noun} ${toBe.toBe}`; \n}\n\n/**\n * Returns whether the first noun is plural\n * @param {string} text \n * @param {boolean} returnNoun \n * @returns {boolean|{noun:string, isPlural:boolean}}\n */\nexport const isPlural = (text, returnNoun) => {\n    let noun = getNoun(text, true);\n\n    let plural = noun.nlp.isPlural().data().length;\n    return returnNoun?{noun:noun.noun, isPlural:plural}:plural;    \n\n}\n\n/**\n * If there are multiple words, use context to get noun.\n * If it is one word, it is a noun if it is not a verb, adverb, or adjective.\n * @param {string} text Complete sentence or single word\n * @param {boolean} returnNLP  \n * @return {string|{noun:string, nlp:object}}\n */\nexport const getNoun = (text, returnNLP) => {\n    let parse = nlp(text);\n\n    let noun = parse.nouns(0).data();\n    if(noun.length === 0) throw new NoNounError(text);\n    return returnNLP?{noun:noun[0].text, nlp:parse.nouns(0)}:noun[0].text;\n}\n\n\n\nexport class NoNounError extends Error {\n    constructor(text) {\n      super(`No noun was found in text: '${text}'`);\n      this.name = \"NoNounError\";\n    }\n}","import { setIn as setState } from 'timm'\nimport System from './System'\nimport { Notable, Container, Openable, Containable, Name, Presence } from \"../components\";\nimport { Description } from \"../components/Description\";\nimport { getArticleInPlace, getToBe } from '../util/Proper'\nimport { logger } from '../util';\n\n\nlet logs = new logger(\"SightSystem\", 0);\nclass SightSystem extends System{\n\n    update(dt, state) {\n        let desc = this.describeRoom(this.getCurrRoom());\n        \n        return setState(state, [\"world\", \"description\"], desc)\n    }\n\n    isTriggered(dt, state) {\n        return !!state.events.actions.look;\n    }\n    \n    /**\n     * Returns description of specified room\n     *\n     * @param {Entity} room\n     */\n    describeRoom(room) {\n        if(!room) room = this.getCurrRoom();\n        let message = this.appendDescription(room.description.text, room);\n        return message;\n    }\n\n    \n    appendDescription(description, room) {\n        let updatedDescription = description;\n        const entities = this.entitiesInRoom(this.world, room);\n        for (let entity in entities) {\n            if(entity === this.world.queryTag('player')[0]) continue;\n            if (entity.hasComponent(Notable)) {\n                //Use generated description or one that is provided\n                updatedDescription += this.describe(entity)\n            }\n            updatedDescription += `\\n${this.describeContainerContents(entity)}`;\n        }\n        return updatedDescription\n    }\n\n    describeContainerContents(entity) {\n        if(!entity.hasComponent(Container)) return \"\";\n        const containerName = entity.name.label || \"nearby container\";\n        const article = entity.name.label? \"The\":\"A\";\n        const items = this.listContainerContents(entity);\n        if(items.length < 0) return \"\";\n        return `${article} ${containerName} contains:\\n  ${items.join(\"\\n  \")}`;\n    }\n\n    listContainerContents(entity) {\n        if(!entity.hasComponent(Container)) return [];\n        if(entity.hasComponent(Openable) && !entity.openable.isOpen) return [];\n\n        const contents = this.fetchContainedEntities(this.world, entity);\n        return contents.map(item => this.describe(this.world, item, true));\n    }\n\n     /**\n     * Get all entities that are contained in given entity\n     * @param {Entity} entity The container entity\n     */\n    fetchContainedEntities(entity) {\n        const containables = this.world.queryComponents([Containable]);\n        return containables.filter(child => child.containable.container === entity);\n    }  \n\n    entitiesInRoom(room) {\n        if(!room){\n            room = this.getCurrRoom();\n        }\n        //let result = entitiesPresentInRoom()\n        //result.append(entitiesContainedByRoom())\n        return this.world.queryComponents([Presence]).filter(name => name === room);\n    }\n\n    /**\n     * Get Description for entity\n     * @param {Entity} entity \n     * @param {boolean} namePreferred Try to return name first\n     */\n    static describe(entity, namePreferred = false) {\n        let message;\n        if(entity.hasComponent(Description) && entity.description.inRoom)\n            message = entity.description.inRoom;\n\n        if((!message || namePreferred) && entity.hasComponent(Name))\n            message = `\\nThere ${getToBe(entity.name.label)} ${getArticleInPlace(entity.name.label, true)[0]} here.`\n\n        return message || \"unknown object\";\n    }\n    \n\n}\n\nexport default SightSystem","import System from './System'\nimport { setIn as setState } from 'timm'\nclass ExitSystem extends System {\n  update(dt, state) {\n    //List exits in state\n    const room = this.getCurrRoom();\n    const exitsInRoom = this.world.queryTag('exit')\n                                  .filter(exit => exit.portal.backwardLink === room)\n                                  .map(exit => exit.name.label)\n    return setState(state, [\"world\", \"exitNames\"], exitsInRoom);\n  }\n\n  isTriggered(dt, state){\n    return !!state.events.moveTo\n  }\n}\n\nexport default ExitSystem","import SceneManager from '../managers/SceneManger'\nimport DataManager from '../managers/DataManager'\n//Rooms\nimport { Player } from '../Assemblages'\n//Systems\nimport PlayerSystem from '../systems/Player';\nimport RoomSystem from '../systems/Room';\nimport SightSystem from '../systems/Sight';\nimport ExitSystem from '../systems/Exits'\n//util\nimport { bind_trailing_args } from '.';\n\n/***  ENTITIES ***********************************************************/\n\nexport const entities = [\n    bind_trailing_args(Player)\n];\n\n/*** SYSTEMS ****************************************************************/\n\nexport const systems = [\n    RoomSystem, SightSystem, ExitSystem\n];\n\n/*** Managers *****************************************************************/\nexport const managers = {\n    SceneManager, DataManager\n}\n\n","import { UPDATE} from '../actions/types.js'\nimport World from '../../ecs/index.js';\n\nconst initialState = World.getState().world\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case UPDATE: return action.payload\n        default: return state;                                                                                                                                                                        \n    }\n}","import { combineReducers } from 'redux';\nimport worldReducer from './worldReducer';\n\nexport default combineReducers({\n    world: worldReducer\n})   ","export const EXIT  = 'EXIT';\nexport const UPDATE = 'UPDATE';","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './redux/reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, initialState, composeEnhancers(\n    applyMiddleware(...middleware)\n));\nexport default store;","import React from \"react\";\n\nconst DisplayWindow = props => (\n  <div className=\"TextWindow\">\n    {props.children}\n  </div>\n)\n\nexport default DisplayWindow","import { UPDATE } from './types.js';\nimport World from '../../ecs';\n\n\nexport const update = (dt) => {\n    World.update(dt);\n    return {\n        type: UPDATE,\n        payload: World.getState().world\n    }\n}\n\nexport const Action = {\n    exitToRoom: (roomName) => {\n        World.triggerEvent('moveTo', roomName);\n        World.takeAction('look');\n    }\n}","import React from \"react\";\nimport styled from 'styled-components';\n\nconst Description = props => (\n  <Root className=\"Description\">\n      <p>{props.description}</p>\n  </Root>\n)\n\nconst Root = styled.div`\n    margin-top: 0;\n    & p {\n        white-space: pre-line;\n    }\n`\n\nexport default Description","import React from \"react\";\nimport styled from 'styled-components'\n\nconst Exits = props => (\n  <Root className=\"Exits\">\n    {props.exits.map((name, index) => {\n        return <li key={ index } onClick={props.handleClick.bind(this,name)}>{name}</li>;\n    })}\n  </Root>\n)\n\nconst Root = styled.ul`\n  margin-top: 0;\n`\n\nexport default Exits","import React from \"react\";\nimport Exits from \"../presentation/Exits\";\nimport { connect } from 'react-redux';\nimport { Action } from '../../redux/actions'\n\nclass ExitsProvidor extends React.Component {\n    render() {\n        return React.createElement(Exits, this.props);\n    }\n}\n\nconst mapStateToProps = function(state) {\n    return {\n      exits: state.world.exitNames\n    }\n  }\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleClick: (exit) => {\n            Action.exitToRoom(exit)\n        }\n    }\n  }\n  \n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExitsProvidor);\n\n","import React from \"react\";\nimport DisplayWindow from \"../presentation/DisplayWindow\";\nimport { getDesc } from '../../redux/actions'\nimport { connect } from 'react-redux';\nimport Description from \"../presentation/Description\";\nimport ExitsProvidor from \"./ExitsProvidor\";\n\nclass DisplayWindowProvider extends React.Component {\n    render() {\n        return React.createElement(DisplayWindow, null, \n            <ExitsProvidor />,\n            <Description description={this.props.desc}/>,\n        );\n    }\n}\n\nconst mapStateToProps = function(state) {\n    return {\n      desc: state.world.description\n    }\n  }\n  \n\nexport default connect(mapStateToProps)(DisplayWindowProvider);\n\n","import React from 'react';\nimport ReactAnimationFrame from 'react-animation-frame';\nimport { update } from '../../redux/actions'\n \nclass Updater extends React.Component {\n    onAnimationFrame(time, lastTime) {\n        const dt = time - lastTime;\n        this.props.store.dispatch(update(dt));\n    }\n\n    render(){return null}\n}\n \nexport default ReactAnimationFrame(Updater, 1000);","//Depends\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport styled, {ThemeProvider} from 'styled-components'\nimport Theme from './styles/theme'\nimport store from './store.js'\n\n//Components\nimport DisplayWindowProvider from './components/provider/DisplayWindowProvider'\nimport Updater from './components/provider/Updater'\n\nclass App extends Component {\n  render() {\n    return (\n        <ThemeProvider theme={Theme}>\n        <Provider store={store}>\n            <Root className=\"App\">\n                <Updater store={store}/>\n                <DisplayWindowProvider />\n            </Root>\n        </Provider>\n        </ThemeProvider>\n    );\n  }\n}\n\nconst Root = styled.div`\n    height: 100%;\n    width: 100%;\n    margin-top: 0;\n    position: absolute;\n    top: 0;\n    background: ${props => props.theme.colors.background}\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const scene_schema = {\n  version: 0,\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      primary: true\n    },\n    rooms: {\n      type: 'array',\n      'uniqueItems': true,\n      ref: 'room',\n      items: {type: 'string'},\n    }\n  }\n}\nexport const room_schema = {\n  version: 0,\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      primary: true\n    },\n    description: {type: 'string', ref: 'description'},\n    exits: {\n      type: 'object',\n      properties: {\n        N: {type: 'string', ref: 'room', \"optional\": true},\n        E: {type: 'string', ref: 'room', \"optional\": true},\n        S: {type: 'string', ref: 'room', \"optional\": true},\n        W: {type: 'string', ref: 'room', \"optional\": true},\n      }\n    },\n    flags: {\n      type: 'object',\n      properties: {\n        hasEntered: {type: 'boolean', default: false}\n      }\n    }\n  },\n  required: ['description']\n}\n\nexport const description_schema = {\n  version: 0,\n  type: 'object',\n  properties: {\n    name: {type: 'string', primary: true},\n    text: {type: 'array', item: {type: 'string'}},\n    next: {type: 'string', ref: 'description'}\n  },\n  required: ['text']\n}","import  * as RxDB from 'rxdb';\nimport { scene_schema, room_schema, description_schema } from './schema';\n\nconst collections = [\n  { name: 'scene', schema: scene_schema },\n  { name: 'room', schema: room_schema },\n  { name: 'description', schema: description_schema }\n];\n\nlet dbPromise = null;\n\n/**\n * Create database and collections\n */\nconst _create = async () => {\n  if(process.env.NODE_ENV === 'development')\n    RxDB.plugin(require('pouchdb-adapter-memory'));\n  else \n    RxDB.plugin(require('pouchdb-adapter-idb'));\n\n  const adapter = process.env.NODE_ENV === 'development'?'memory':'idb'\n\n  console.log('DatabaseService: creating database..');\n  const db = await RxDB.create(\n    {name: \"apothecary_game\", adapter: adapter}\n  );\n  console.log('DatabaseService: created database');\n\n  // create collections\n  console.log('DatabaseService: create collections');\n  await Promise.all(collections.map(colData => db.collection(colData)));\n\n  return db;\n}\n\n/**\n * Get initialized database\n * @returns {RxDB.RxDatabase}\n */\nexport const get = async () => {\n  if (!dbPromise)\n    dbPromise = await _create();\n  return dbPromise;\n}\n\n/**\n * Initializes and loads database\n * @returns {RxDB.RxDatabase}\n */\nexport const loadDatabase = async () => {\n  const db = await get();\n\n  //Do not re-initialize database\n  if(await db.getLocal('initialized')) return db;\n\n  //Data\n  ['scene','room', 'description'].forEach(name => fill(name, db));\n\n  //Do not re-init database\n  await db.insertLocal('initialized', {isTrue: true})\n\n  return db;\n} \n\nconst fill = (name, db) => {\n  let data = require(`./data/${name}.json`);\n  data.forEach(entity => db[name].insert(entity));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { loadDatabase } from './database'\nimport World from './ecs'\n\n//ensures all assets are loaded\nloadDatabase().then(db => {\n  new World({database: db, callback: load});\n});\n\nconst load = () => {\n  console.log(\"AM LOAD\")\n  ReactDOM.render(<App />, document.getElementById('root'));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{
  "stats": {
    "suites": 24,
    "tests": 65,
    "passes": 63,
    "pending": 0,
    "failures": 2,
    "start": "2018-07-07T05:40:30.257Z",
    "end": "2018-07-07T05:40:30.339Z",
    "duration": 82,
    "testsRegistered": 65,
    "passPercent": 96.9,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "de47cf26-39c0-40ca-8ebe-3b781d380160",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "97c9e9e3-16c4-4604-8f06-25fa5d0ce736",
        "title": "<App />",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Components/AppCompTest.js",
        "file": "/test/Components/AppCompTest.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "<App /> \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "props = {\n    display: { start: function start() {}, update: function update() {}, end: function end() {} },\n    room: \"\",\n    exits: [\"\", \"\"]\n};\napp = undefined;",
            "err": {},
            "isRoot": false,
            "uuid": "44cd95d4-d115-49b3-92a8-c7bf372a5e53",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "always renders a div",
            "fullTitle": "<App /> always renders a div",
            "timedOut": false,
            "duration": 37,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "var divs = Game().find(\"div\");\n_chai.assert.isAbove(divs.length, 0);",
            "err": {
              "message": "TypeError: this.props.display.getActions is not a function",
              "estack": "TypeError: this.props.display.getActions is not a function\n    at Room.render (src/components/Room.js:12:370)\n    at finishClassComponent (node_modules/react-dom/cjs/react-dom.development.js:13193:31)\n    at updateClassComponent (node_modules/react-dom/cjs/react-dom.development.js:13155:10)\n    at beginWork (node_modules/react-dom/cjs/react-dom.development.js:13824:14)\n    at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:15863:12)\n    at workLoop (node_modules/react-dom/cjs/react-dom.development.js:15902:24)\n    at renderRoot (node_modules/react-dom/cjs/react-dom.development.js:15942:7)\n    at performWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:16560:22)\n    at performWork (node_modules/react-dom/cjs/react-dom.development.js:16482:7)\n    at performSyncWork (node_modules/react-dom/cjs/react-dom.development.js:16454:3)\n    at requestWork (node_modules/react-dom/cjs/react-dom.development.js:16354:5)\n    at scheduleWork$1 (node_modules/react-dom/cjs/react-dom.development.js:16218:11)\n    at scheduleRootUpdate (node_modules/react-dom/cjs/react-dom.development.js:16785:3)\n    at updateContainerAtExpirationTime (node_modules/react-dom/cjs/react-dom.development.js:16812:10)\n    at updateContainer (node_modules/react-dom/cjs/react-dom.development.js:16839:10)\n    at ReactRoot.render (node_modules/react-dom/cjs/react-dom.development.js:17122:3)\n    at /home/dawn/Documents/Javascript projects/text-adventure/node_modules/react-dom/cjs/react-dom.development.js:17262:14\n    at unbatchedUpdates (node_modules/react-dom/cjs/react-dom.development.js:16679:10)\n    at legacyRenderSubtreeIntoContainer (node_modules/react-dom/cjs/react-dom.development.js:17258:5)\n    at Object.render (node_modules/react-dom/cjs/react-dom.development.js:17317:12)\n    at Object.render (node_modules/enzyme-adapter-react-16/build/ReactSixteenAdapter.js:218:50)\n    at new ReactWrapper (node_modules/enzyme/build/ReactWrapper.js:98:16)\n    at mount (node_modules/enzyme/build/mount.js:19:10)\n    at Game (test/Components/AppCompTest.js:12:19)\n    at Context.<anonymous> (test/Components/AppCompTest.js:29:22)"
            },
            "isRoot": false,
            "uuid": "f13b7cb2-57b6-47f1-b3f5-70d7e7b56e64",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "c2d74e1b-6780-452d-bde0-1b4e1aef82df",
            "title": "the rendered div",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Components/AppCompTest.js",
            "file": "/test/Components/AppCompTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "contains everything else that gets rendered",
                "fullTitle": "<App /> the rendered div contains everything else that gets rendered",
                "timedOut": false,
                "duration": 8,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var divs = Game().find(\"div\");\nvar wrappingDiv = divs.first();\n_chai.assert.equal(wrappingDiv.children(), Game().children);",
                "err": {
                  "message": "TypeError: this.props.display.getActions is not a function",
                  "estack": "TypeError: this.props.display.getActions is not a function\n    at Room.render (src/components/Room.js:12:370)\n    at finishClassComponent (node_modules/react-dom/cjs/react-dom.development.js:13193:31)\n    at updateClassComponent (node_modules/react-dom/cjs/react-dom.development.js:13155:10)\n    at beginWork (node_modules/react-dom/cjs/react-dom.development.js:13824:14)\n    at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:15863:12)\n    at workLoop (node_modules/react-dom/cjs/react-dom.development.js:15902:24)\n    at renderRoot (node_modules/react-dom/cjs/react-dom.development.js:15942:7)\n    at performWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:16560:22)\n    at performWork (node_modules/react-dom/cjs/react-dom.development.js:16482:7)\n    at performSyncWork (node_modules/react-dom/cjs/react-dom.development.js:16454:3)\n    at requestWork (node_modules/react-dom/cjs/react-dom.development.js:16354:5)\n    at scheduleWork$1 (node_modules/react-dom/cjs/react-dom.development.js:16218:11)\n    at scheduleRootUpdate (node_modules/react-dom/cjs/react-dom.development.js:16785:3)\n    at updateContainerAtExpirationTime (node_modules/react-dom/cjs/react-dom.development.js:16812:10)\n    at updateContainer (node_modules/react-dom/cjs/react-dom.development.js:16839:10)\n    at ReactRoot.render (node_modules/react-dom/cjs/react-dom.development.js:17122:3)\n    at /home/dawn/Documents/Javascript projects/text-adventure/node_modules/react-dom/cjs/react-dom.development.js:17262:14\n    at unbatchedUpdates (node_modules/react-dom/cjs/react-dom.development.js:16679:10)\n    at legacyRenderSubtreeIntoContainer (node_modules/react-dom/cjs/react-dom.development.js:17258:5)\n    at Object.render (node_modules/react-dom/cjs/react-dom.development.js:17317:12)\n    at Object.render (node_modules/enzyme-adapter-react-16/build/ReactSixteenAdapter.js:218:50)\n    at new ReactWrapper (node_modules/enzyme/build/ReactWrapper.js:98:16)\n    at mount (node_modules/enzyme/build/mount.js:19:10)\n    at Game (test/Components/AppCompTest.js:12:19)\n    at Context.<anonymous> (test/Components/AppCompTest.js:35:26)"
                },
                "isRoot": false,
                "uuid": "5dcc3195-6caa-49db-8f54-f285ba103f12",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "5dcc3195-6caa-49db-8f54-f285ba103f12"
            ],
            "pending": [],
            "skipped": [],
            "duration": 8,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [
          "f13b7cb2-57b6-47f1-b3f5-70d7e7b56e64"
        ],
        "pending": [],
        "skipped": [],
        "duration": 37,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "801c625b-a498-4831-904f-16626ba0c397",
        "title": "<Exits/>",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Components/ExitsCompTest.js",
        "file": "/test/Components/ExitsCompTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should render ul with length of exits",
            "fullTitle": "<Exits/> should render ul with length of exits",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var props = [1, 1, 1, 1];\nvar wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Exits.Exits, { exits: props, __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n    },\n    __self: _this\n}));\n_chai.assert.lengthOf(wrapper.find(\"ul\").children(), 4);",
            "err": {},
            "isRoot": false,
            "uuid": "9d8d0ee5-8267-4263-a395-8d2d5fc84c53",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9d8d0ee5-8267-4263-a395-8d2d5fc84c53"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2efc5722-2bcf-4b84-9467-d5afb5571fc2",
        "title": "Test Basic Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
        "file": "/test/DIsplays/BasicDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b29c5a28-29b3-479a-bd36-fc46ee4b0cf0",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if standard argument is not a string",
                "fullTitle": "Test Basic Display constructor should throw error if standard argument is not a string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Basic.Basic(1);\n};\nassert.throws(func, 'Standard description must be a string.');",
                "err": {},
                "isRoot": false,
                "uuid": "f4abccf6-6e47-4204-845b-b19d5d5ee4fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if initDesc argument is passed and is not a string",
                "fullTitle": "Test Basic Display constructor should throw error if initDesc argument is passed and is not a string",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Basic.Basic(\"\", 3);\n};\nassert.throws(func, 'Initial description must be a string.');",
                "err": {},
                "isRoot": false,
                "uuid": "bf3d790b-2f66-4d94-940d-d00a0ac82c9a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f4abccf6-6e47-4204-845b-b19d5d5ee4fb",
              "bf3d790b-2f66-4d94-940d-d00a0ac82c9a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4821eadf-9045-42ab-b474-f1e37ed1fe04",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return initial description if it is specified",
                "fullTitle": "Test Basic Display start method should return initial description if it is specified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\", \"initial desc\");\nassert.equal(dis.start(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "2dfd15f4-18fb-4368-8523-3414d811a53b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return standard description if initial description is not specified",
                "fullTitle": "Test Basic Display start method should return standard description if initial description is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\");\nassert.equal(dis.start(), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "fe981a48-1b5b-40a0-9f70-2b7a155ed702",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2dfd15f4-18fb-4368-8523-3414d811a53b",
              "fe981a48-1b5b-40a0-9f70-2b7a155ed702"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "20b101a8-2ca9-4677-8637-fa0132dabe66",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return standard description",
                "fullTitle": "Test Basic Display update method should return standard description",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\");\nvar initDis = new _Basic.Basic(\"standard desc\", \"initial desc\");\nassert.equal(dis.update(), \"standard desc\");\nassert.notEqual(initDis.update(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "5bbeb1c6-00eb-4405-8ec0-7f3754356502",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5bbeb1c6-00eb-4405-8ec0-7f3754356502"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "091bf6e9-d739-4595-98da-0387761e7bf0",
        "title": "Test DisplayManager",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
        "file": "/test/DIsplays/DisplayManagerTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0f77b91d-cd68-454a-af4e-24cbdd343f34",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if displayManager is not an object",
                "fullTitle": "Test DisplayManager constructor should throw error if displayManager is not an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fn = function fn() {\n    new _DisplayManager.DisplayManager(0);\n};\nassert.throws(fn, 'displayMaps must be an object.');",
                "err": {},
                "isRoot": false,
                "uuid": "f5a8bf3c-2248-445a-b6bc-32172a1c4b34",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should derive displayMap from given displayName",
                "fullTitle": "Test DisplayManager constructor should derive displayMap from given displayName",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initDisplayMap = dm.displayMap;\nassert.deepEqual(initDisplayMap, { display: dis });",
                "err": {},
                "isRoot": false,
                "uuid": "464e39a4-f880-45db-b451-5768de21cc16",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f5a8bf3c-2248-445a-b6bc-32172a1c4b34",
              "464e39a4-f880-45db-b451-5768de21cc16"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5e19d714-c933-4c4f-9efd-ba77afcf75bf",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return current display's description",
                "fullTitle": "Test DisplayManager start method should return current display's description",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = dm.start();\nassert.equal(start, \"I am a standard description\");",
                "err": {},
                "isRoot": false,
                "uuid": "56283fd1-4f97-4a14-a2d7-ab778160c4f2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return display from passed displayName",
                "fullTitle": "Test DisplayManager start method should return display from passed displayName",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = dm.start(null, \"test2\");\nassert.equal(start, \"I am a secodairy description\");",
                "err": {},
                "isRoot": false,
                "uuid": "09a32578-d8a5-43e0-9305-df92047a9b52",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should pass world data to current display",
                "fullTitle": "Test DisplayManager start method should pass world data to current display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = worldDm.start({ msg: \"Message for standard description\" });\nassert.equal(start, \"Message for standard description\");",
                "err": {},
                "isRoot": false,
                "uuid": "b39f4703-1413-444c-b6ec-b82b21ad48cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should pass world data to secondairy display",
                "fullTitle": "Test DisplayManager start method should pass world data to secondairy display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = worldDm.start({ msg: \"Message for secondairy description\" });\nassert.equal(start, \"Message for secondairy description\");",
                "err": {},
                "isRoot": false,
                "uuid": "791f9463-297a-423a-9e03-2c041795b8a7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "56283fd1-4f97-4a14-a2d7-ab778160c4f2",
              "09a32578-d8a5-43e0-9305-df92047a9b52",
              "b39f4703-1413-444c-b6ec-b82b21ad48cf",
              "791f9463-297a-423a-9e03-2c041795b8a7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5838d425-d5ee-4099-8082-4ed112eb62ab",
            "title": "shouldTransition method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false when no to is specified",
                "fullTitle": "Test DisplayManager shouldTransition method should return false when no to is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dm.shouldTransition();\nassert.equal(start, false);",
                "err": {},
                "isRoot": false,
                "uuid": "2109ac8c-b685-4090-a748-f2f0104b4d83",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return false when there are no valid transactions",
                "fullTitle": "Test DisplayManager shouldTransition method should return false when there are no valid transactions",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmFalseTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return false;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmFalseTran.shouldTransition();\nassert.equal(start, false);",
                "err": {},
                "isRoot": false,
                "uuid": "f39120e4-4529-44bb-a7f2-2ab743b11ba0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a display name when there is a valid transaction and no prioity is specified",
                "fullTitle": "Test DisplayManager shouldTransition method should return a display name when there is a valid transaction and no prioity is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmValidTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return true;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmValidTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "c1cb1a16-ed95-4d83-a800-5a81e5301e00",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the first display name when no valid transactions have priority",
                "fullTitle": "Test DisplayManager shouldTransition method should return the first display name when no valid transactions have priority",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return true;\n            } }, { name: \"test3\", condition: function condition() {\n                return true;\n            } }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "1f52562b-e625-4b76-ab02-782512f7cb43",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the first display name when there are tied priority valid transactions",
                "fullTitle": "Test DisplayManager shouldTransition method should return the first display name when there are tied priority valid transactions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return true;\n            }, priority: 1 }, { name: \"test3\", condition: function condition() {\n                return true;\n            }, priority: 1 }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "d842d0c8-ab80-410e-a06c-b8d0bb834cda",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an invalid transaction",
                "fullTitle": "Test DisplayManager shouldTransition method should not return an invalid transaction",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return false;\n            }, priority: 1 }, { name: \"test3\", condition: function condition() {\n                return true;\n            }, priority: 2 }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test3\");",
                "err": {},
                "isRoot": false,
                "uuid": "2048c7f2-8679-431f-b0ac-69d5f2dfd373",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2109ac8c-b685-4090-a748-f2f0104b4d83",
              "f39120e4-4529-44bb-a7f2-2ab743b11ba0",
              "c1cb1a16-ed95-4d83-a800-5a81e5301e00",
              "1f52562b-e625-4b76-ab02-782512f7cb43",
              "d842d0c8-ab80-410e-a06c-b8d0bb834cda",
              "2048c7f2-8679-431f-b0ac-69d5f2dfd373"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a098ee12-0b19-4a45-a576-104a2cfe0f40",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return updated display when to is not specified",
                "fullTitle": "Test DisplayManager update method should return updated display when to is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dm.update();\nassert.equal(start, \"update1\");",
                "err": {},
                "isRoot": false,
                "uuid": "b553c64b-77dd-4c4b-a982-08c96a4b6df3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return updated display when to is specified but no transition takes place",
                "fullTitle": "Test DisplayManager update method should return updated display when to is specified but no transition takes place",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmFalseTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return false;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmFalseTran.update();\nassert.equal(start, \"update1\");",
                "err": {},
                "isRoot": false,
                "uuid": "8a77c042-125d-4821-b63b-9d0b249521a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return started display of transition when a transition takes place",
                "fullTitle": "Test DisplayManager update method should return started display of transition when a transition takes place",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmValidTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return true;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmValidTran.update();\nassert.equal(start, \"start2\");",
                "err": {},
                "isRoot": false,
                "uuid": "01b6b284-e61f-43a3-85b4-b06afc2e761e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b553c64b-77dd-4c4b-a982-08c96a4b6df3",
              "8a77c042-125d-4821-b63b-9d0b249521a4",
              "01b6b284-e61f-43a3-85b4-b06afc2e761e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "17b3d57d-23f1-484a-ad13-f65e7b526586",
            "title": "stop method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return stop in display",
                "fullTitle": "Test DisplayManager stop method should return stop in display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar stop = dm.stop();\nassert.equal(stop, \"stop\");",
                "err": {},
                "isRoot": false,
                "uuid": "6fd9d993-08be-4074-974c-7836f0910d44",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6fd9d993-08be-4074-974c-7836f0910d44"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bdd253ba-ffc1-409b-a760-d1e2c8f0b9eb",
        "title": "Test Flipbook Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
        "file": "/test/DIsplays/FlipbookDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "593768b0-92fd-4f76-9619-f38fdefe611a",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the first page",
                "fullTitle": "Test Flipbook Display start method should return the first page",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([\"This is a page\"]);\nassert.equal(des.start({ tick: 0 }), \"This is a page\");",
                "err": {},
                "isRoot": false,
                "uuid": "e5bc253e-e53b-4083-9c0f-3fd721207e55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return undefined if first page has delay specified",
                "fullTitle": "Test Flipbook Display start method should return undefined if first page has delay specified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 1]]);\nassert.isUndefined(des.start({ tick: 0 }));",
                "err": {},
                "isRoot": false,
                "uuid": "89a9df71-54a2-4e07-b15d-7da8cc38ddc8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should wait ticks if first page has delay specified",
                "fullTitle": "Test Flipbook Display start method should wait ticks if first page has delay specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\nassert.isUndefined(des.start({ tick: 0 }));\nassert.equal(des.update({ tick: 2 }), \"This is a page\");",
                "err": {},
                "isRoot": false,
                "uuid": "ea5f5877-1664-44ea-b8f5-4f083c1ea632",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e5bc253e-e53b-4083-9c0f-3fd721207e55",
              "89a9df71-54a2-4e07-b15d-7da8cc38ddc8",
              "ea5f5877-1664-44ea-b8f5-4f083c1ea632"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1177d451-ab60-422e-8e67-b7abc9f15c1b",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if instance has not been started yet",
                "fullTitle": "Test Flipbook Display update method should throw error if instance has not been started yet",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\nvar fn = function fn() {\n    return des.update({ tick: 1 });\n};\nassert.throws(fn, \"Flipbook must be started before it is updated.\");",
                "err": {},
                "isRoot": false,
                "uuid": "9981cd68-5468-446c-bfaf-f359fb754663",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return undefined if initial scene has not started yet",
                "fullTitle": "Test Flipbook Display update method should return undefined if initial scene has not started yet",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\ndes.start({ tick: 0 });\nassert.isUndefined(des.update({ tick: 1 }));",
                "err": {},
                "isRoot": false,
                "uuid": "8c4c9592-0b47-4889-977f-014defb238cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "ac54801f-b611-423c-bb2d-081b1feeabe5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "58259612-aa8c-4864-be8c-5b928fa296ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "f128aa73-a102-4320-9044-fc8b37e09a9d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "f5d948da-8328-4b20-a03b-a123c3557ff3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the current scence if no time passes but there are multiple 0 tick pages",
                "fullTitle": "Test Flipbook Display update method should return the current scence if no time passes but there are multiple 0 tick pages",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"target page\", 0], [\"This is a second page\", 0]]);\ndes.start({ tick: 0 });\nassert.equal(des.update({ tick: 0 }), \"target page\");",
                "err": {},
                "isRoot": false,
                "uuid": "f95ec7e6-6fc5-4824-9880-c3b33097de66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "3a4f822e-24de-48fc-8b16-01aea27caeac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "b66caf4c-85b9-4fbb-96f5-476dabed7f4c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "b1069048-abce-4f4a-892a-5698154dafeb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return last scene if delay is greater than last scene's delay",
                "fullTitle": "Test Flipbook Display update method should return last scene if delay is greater than last scene's delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 0], [\"This is a second page\", 10], [\"This is the last page\", 10]]);\ndes.start({ tick: 0 });\nassert.equal(des.update({ tick: 30 }), \"This is the last page\");",
                "err": {},
                "isRoot": false,
                "uuid": "6dcad896-06d3-47d8-a37e-14d843a68cfa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return last scene if in previous update last scene had been reached",
                "fullTitle": "Test Flipbook Display update method should return last scene if in previous update last scene had been reached",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 0], [\"This is the last page\", 10]]);\ndes.start({ tick: 0 });\ndes.update({ tick: 10 });\nassert.equal(des.update({ tick: 20 }), \"This is the last page\");",
                "err": {},
                "isRoot": false,
                "uuid": "6a565d8e-fa28-413a-9f6b-d3a1af097930",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "7b78294a-8343-43e3-a324-d886644d6496",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "06e7f4a9-5ad4-4fb7-b635-84d26870c69f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "bdfaab5f-d603-4454-ad17-098c434bd49a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9981cd68-5468-446c-bfaf-f359fb754663",
              "8c4c9592-0b47-4889-977f-014defb238cb",
              "ac54801f-b611-423c-bb2d-081b1feeabe5",
              "58259612-aa8c-4864-be8c-5b928fa296ce",
              "f128aa73-a102-4320-9044-fc8b37e09a9d",
              "f5d948da-8328-4b20-a03b-a123c3557ff3",
              "f95ec7e6-6fc5-4824-9880-c3b33097de66",
              "3a4f822e-24de-48fc-8b16-01aea27caeac",
              "b66caf4c-85b9-4fbb-96f5-476dabed7f4c",
              "b1069048-abce-4f4a-892a-5698154dafeb",
              "6dcad896-06d3-47d8-a37e-14d843a68cfa",
              "6a565d8e-fa28-413a-9f6b-d3a1af097930",
              "7b78294a-8343-43e3-a324-d886644d6496",
              "06e7f4a9-5ad4-4fb7-b635-84d26870c69f",
              "bdfaab5f-d603-4454-ad17-098c434bd49a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "325cf20c-2487-42b9-ba99-4ff412c6fd8f",
            "title": "formatPage",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return proper object from string",
                "fullTitle": "Test Flipbook Display formatPage should return proper object from string",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = \"This is a page\";\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: page, delay: 0 });",
                "err": {},
                "isRoot": false,
                "uuid": "e2a243dc-d04d-4ae6-b780-c7b99013e057",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and array length is not 2",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and array length is not 2",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\"];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page array must have exactly 2 items.\");",
                "err": {},
                "isRoot": false,
                "uuid": "2d6723ea-7c2f-42f7-bbb0-91dcd1df46e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and first item in array is not string",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and first item in array is not string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [1, 2];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"is not a string. First item in page array must be a string.\");",
                "err": {},
                "isRoot": false,
                "uuid": "8a253501-b583-4064-9625-f48b9975abca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and second item in array is not a postive number",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and second item in array is not a postive number",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\", \"not a number\"];\nvar negPage = [\"This is a page\", -2];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nvar funcneg = function funcneg() {\n    return (0, _Flipbook.formatPage)(negPage);\n};\nassert.throws(func, \"Second item in page array must be a postive number.\");\nassert.throws(funcneg, \"Second item in page array must be a postive number.\");",
                "err": {},
                "isRoot": false,
                "uuid": "9809e370-262b-42f0-a916-1ad2878dff5f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper object from array",
                "fullTitle": "Test Flipbook Display formatPage should return proper object from array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\", 10];\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: \"This is a page\", delay: 10 });",
                "err": {},
                "isRoot": false,
                "uuid": "bd9d769d-7326-4339-9dd3-5569f709c920",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given object and object does not have desc property.",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given object and object does not have desc property.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { delay: 1 };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page object must have an desc property.\");",
                "err": {},
                "isRoot": false,
                "uuid": "298e748a-de05-46f5-9fe2-1b8216460f98",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given object has a delay property and it is not a postive number.",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given object has a delay property and it is not a postive number.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\", delay: \"not a number\" };\nvar negPage = { desc: \"This is a page\", delay: -1 };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nvar funcneg = function funcneg() {\n    return (0, _Flipbook.formatPage)(negPage);\n};\nassert.throws(func, \"A page object's delay property must be a postive number.\");\nassert.throws(funcneg, \"A page object's delay property must be a postive number.\");",
                "err": {},
                "isRoot": false,
                "uuid": "dcef7ba5-1caa-4422-9cd1-2779d6f6d5f9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add delay property of 0 if object does not have delay property",
                "fullTitle": "Test Flipbook Display formatPage should add delay property of 0 if object does not have delay property",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\" };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.equal((0, _Flipbook.formatPage)(page).delay, 0);",
                "err": {},
                "isRoot": false,
                "uuid": "88682b07-f3a1-45d7-9597-831da911f72c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return object from object",
                "fullTitle": "Test Flipbook Display formatPage should return object from object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\", delay: 10 };\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: \"This is a page\", delay: 10 });",
                "err": {},
                "isRoot": false,
                "uuid": "ff76fd17-3ec5-4028-a62e-7ce4b07d6e68",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an error if the given argument is not an object, array, or string.",
                "fullTitle": "Test Flipbook Display formatPage should return an error if the given argument is not an object, array, or string.",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = 10;\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page should be an object, array, or string.\");",
                "err": {},
                "isRoot": false,
                "uuid": "e492b7a6-85c5-4eb3-8dc4-8c9fbeaef904",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e2a243dc-d04d-4ae6-b780-c7b99013e057",
              "2d6723ea-7c2f-42f7-bbb0-91dcd1df46e9",
              "8a253501-b583-4064-9625-f48b9975abca",
              "9809e370-262b-42f0-a916-1ad2878dff5f",
              "bd9d769d-7326-4339-9dd3-5569f709c920",
              "298e748a-de05-46f5-9fe2-1b8216460f98",
              "dcef7ba5-1caa-4422-9cd1-2779d6f6d5f9",
              "88682b07-f3a1-45d7-9597-831da911f72c",
              "ff76fd17-3ec5-4028-a62e-7ce4b07d6e68",
              "e492b7a6-85c5-4eb3-8dc4-8c9fbeaef904"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c012461d-32ac-4a3b-8898-df685b73d827",
        "title": "Test Time Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
        "file": "/test/DIsplays/TimeDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9edf4c8d-36dc-4a0a-937d-c72a362f64d7",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if times argument is not an object",
                "fullTitle": "Test Time Display constructor should throw error if times argument is not an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Time.Time(1);\n};\nassert.throws(func, 'times must be an object.');",
                "err": {},
                "isRoot": false,
                "uuid": "696cf304-4a1c-4ac1-ab27-314d4eb73a44",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "696cf304-4a1c-4ac1-ab27-314d4eb73a44"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ae8fcb23-30fd-44da-99b4-20dcdfdabdad",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return initial description if it is specified",
                "fullTitle": "Test Time Display start method should return initial description if it is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({}, \"standard desc\", \"initial desc\");\nassert.equal(dis.start(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "65e174aa-ce35-4382-8147-f38a867901db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return update based description if initial description is not specified",
                "fullTitle": "Test Time Display start method should return update based description if initial description is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.start({ timeOfDay: \"morn\" }), \"This is a morning description\");",
                "err": {},
                "isRoot": false,
                "uuid": "40ab77fc-f275-4f5c-b2fe-290b976e6cf4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "65e174aa-ce35-4382-8147-f38a867901db",
              "40ab77fc-f275-4f5c-b2fe-290b976e6cf4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "87958b16-65b7-4663-90a5-12cc45f8413d",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return time-based description if that time's description is specified",
                "fullTitle": "Test Time Display update method should return time-based description if that time's description is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update({ timeOfDay: \"morn\" }), \"This is a morning description\");",
                "err": {},
                "isRoot": false,
                "uuid": "97d52dcd-bb41-4fdc-87c2-863160462566",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the standard description if the time's description is not specified",
                "fullTitle": "Test Time Display update method should return the standard description if the time's description is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update({ timeOfDay: \"noon\" }), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "8056e142-7438-4a1d-8d37-7cddeb882bc8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the standard description if world argument is not passed",
                "fullTitle": "Test Time Display update method should return the standard description if world argument is not passed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update(), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "078d31ff-57e4-476a-a229-1de9dc88465b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "97d52dcd-bb41-4fdc-87c2-863160462566",
              "8056e142-7438-4a1d-8d37-7cddeb882bc8",
              "078d31ff-57e4-476a-a229-1de9dc88465b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "52767a3b-69a3-48ee-947b-7728c9f9b64f",
        "title": "Reducer",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Reducers/IndexTest.js",
        "file": "/test/Reducers/IndexTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return initial state when state is not specified",
            "fullTitle": "Reducer should return initial state when state is not specified",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_chai.assert.equal((0, _index2.default)(), _index.initialState);",
            "err": {},
            "isRoot": false,
            "uuid": "a6430456-928f-4404-b7b4-e541087b5c43",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "changeRoom action should store room info",
            "fullTitle": "Reducer changeRoom action should store room info",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: actions.CHANGE_ROOM, room: _GameObjects.ROOMS.TEST, display: \"display\" };\nvar exits = [\"north\", \"south\", \"east\", \"west\"];\n_chai.assert.deepEqual((0, _index2.default)(_index.initialState, action), Object.assign({}, _index.initialState, {\n    room: _GameObjects.ROOMS.TEST, display: \"display\", exits: exits }));",
            "err": {},
            "isRoot": false,
            "uuid": "92be1204-6313-4ec9-aab4-5ef84dca97af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "changeDisplay action should store display info",
            "fullTitle": "Reducer changeDisplay action should store display info",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: actions.CHANGE_DISPLAY, display: \"display\" };\n_chai.assert.deepEqual((0, _index2.default)(_index.initialState, action), Object.assign({}, _index.initialState, {\n    display: \"display\" }));",
            "err": {},
            "isRoot": false,
            "uuid": "e6d02093-9eea-44a6-bc30-e64d9b4ebde4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "updateTick action should store new tick in world state",
            "fullTitle": "Reducer updateTick action should store new tick in world state",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: actions.UPDATE_TICK, tick: 10 };\n_chai.assert.deepEqual((0, _index2.default)(_index.initialState, action), Object.assign({}, _index.initialState, {\n    world: Object.assign({}, _index.initialState.world, { tick: 10 }) }));",
            "err": {},
            "isRoot": false,
            "uuid": "8ac07789-024a-4e06-94d3-80ad48ee7e42",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a6430456-928f-4404-b7b4-e541087b5c43",
          "92be1204-6313-4ec9-aab4-5ef84dca97af",
          "e6d02093-9eea-44a6-bc30-e64d9b4ebde4",
          "8ac07789-024a-4e06-94d3-80ad48ee7e42"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5ec786bc-72bd-489c-8fe8-044914a0a7fd",
        "title": "genExits",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Reducers/genExitsTest.js",
        "file": "/test/Reducers/genExitsTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return unchanged state if room is not specified in the action",
            "fullTitle": "genExits should return unchanged state if room is not specified in the action",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var state = { key: \"value\", exits: undefined };\n_chai.assert.equal((0, _genExits2.default)(state, {}), state);",
            "err": {},
            "isRoot": false,
            "uuid": "4d55ea26-f33c-4116-a2db-1fb8acf8c8cb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should convert room object values to array",
            "fullTitle": "genExits should convert room object values to array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var state = { key: \"value\", exits: undefined };\n_chai.assert.deepEqual((0, _genExits2.default)(state, { room: _GameObjects.ROOMS.TEST }), Object.assign({}, state, { exits: [\"north\", \"south\", \"east\", \"west\"] }));",
            "err": {},
            "isRoot": false,
            "uuid": "2f6ac194-0671-4613-95df-7be5f458c36b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4d55ea26-f33c-4116-a2db-1fb8acf8c8cb",
          "2f6ac194-0671-4613-95df-7be5f458c36b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4ec2644c-fff7-4dd0-9663-738b2c2770ff",
        "title": "Tests configured",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/setupTests.js",
        "file": "/test/setupTests.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "",
            "fullTitle": "Tests configured ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return true;",
            "err": {},
            "isRoot": false,
            "uuid": "88958734-917c-400f-a379-49599b48bd75",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "88958734-917c-400f-a379-49599b48bd75"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}
{
  "stats": {
    "suites": 24,
    "tests": 65,
    "passes": 64,
    "pending": 0,
    "failures": 1,
    "start": "2018-07-05T02:59:12.268Z",
    "end": "2018-07-05T02:59:12.349Z",
    "duration": 81,
    "testsRegistered": 65,
    "passPercent": 98.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "7aafa40c-2363-45f4-8d4c-d1c5e1560c21",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "f8b218b3-2ce8-47f6-81ce-35c7e89f9458",
        "title": "<App />",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Components/AppCompTest.js",
        "file": "/test/Components/AppCompTest.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "<App /> \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "props = {\n    display: { start: function start() {}, update: function update() {}, end: function end() {} },\n    room: \"\",\n    exits: [\"\", \"\"]\n};\napp = undefined;",
            "err": {},
            "isRoot": false,
            "uuid": "8d12bf82-1dd0-434e-9ee3-f9289e5ba0a1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "always renders a div",
            "fullTitle": "<App /> always renders a div",
            "timedOut": false,
            "duration": 37,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var divs = Game().find(\"div\");\n_chai.assert.isAbove(divs.length, 0);",
            "err": {},
            "isRoot": false,
            "uuid": "606e28e1-1ef9-420b-aea1-d4edfb48bd82",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "74eee2cf-ef73-49e2-b67a-b0895da7e604",
            "title": "the rendered div",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Components/AppCompTest.js",
            "file": "/test/Components/AppCompTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "contains everything else that gets rendered",
                "fullTitle": "<App /> the rendered div contains everything else that gets rendered",
                "timedOut": false,
                "duration": 7,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var divs = Game().find(\"div\");\nvar wrappingDiv = divs.first();\n_chai.assert.equal(wrappingDiv.children(), Game().children);",
                "err": {
                  "message": "AssertionError: expected { length: 3 } to equal [Function: children]",
                  "estack": "AssertionError: expected { length: 3 } to equal [Function: children]\n    at Context.<anonymous> (test/Components/AppCompTest.js:38:20)"
                },
                "isRoot": false,
                "uuid": "3c30ff56-10fc-476b-b67d-519415c8ba4f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "3c30ff56-10fc-476b-b67d-519415c8ba4f"
            ],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [
          "606e28e1-1ef9-420b-aea1-d4edfb48bd82"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 37,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c6185a35-6b73-43ca-be3f-206fe9d776a1",
        "title": "<Exits/>",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Components/ExitsCompTest.js",
        "file": "/test/Components/ExitsCompTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should render ul with length of exits",
            "fullTitle": "<Exits/> should render ul with length of exits",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var props = [1, 1, 1, 1];\nvar wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Exits.Exits, { exits: props, __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n    },\n    __self: _this\n}));\n_chai.assert.lengthOf(wrapper.find(\"ul\").children(), 4);",
            "err": {},
            "isRoot": false,
            "uuid": "445bbb3b-a1b2-4a54-b18f-4642b15683c6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "445bbb3b-a1b2-4a54-b18f-4642b15683c6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9aa0ee11-9409-4959-be71-9032b0824527",
        "title": "Test Basic Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
        "file": "/test/DIsplays/BasicDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6cc7372f-70fe-43fd-b5ce-efbbde61bf70",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if standard argument is not a string",
                "fullTitle": "Test Basic Display constructor should throw error if standard argument is not a string",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Basic.Basic(1);\n};\nassert.throws(func, 'Standard description must be a string.');",
                "err": {},
                "isRoot": false,
                "uuid": "e31467e8-3fa1-4d84-b17b-f76f3c9f61ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if initDesc argument is passed and is not a string",
                "fullTitle": "Test Basic Display constructor should throw error if initDesc argument is passed and is not a string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Basic.Basic(\"\", 3);\n};\nassert.throws(func, 'Initial description must be a string.');",
                "err": {},
                "isRoot": false,
                "uuid": "424ca373-04a9-4918-893a-343de42950fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e31467e8-3fa1-4d84-b17b-f76f3c9f61ab",
              "424ca373-04a9-4918-893a-343de42950fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d3b778c3-04fe-4f20-bebd-0d058028c471",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return initial description if it is specified",
                "fullTitle": "Test Basic Display start method should return initial description if it is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\", \"initial desc\");\nassert.equal(dis.start(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "a6f53a41-5dfa-4a8a-b5f3-1cbce3130174",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return standard description if initial description is not specified",
                "fullTitle": "Test Basic Display start method should return standard description if initial description is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\");\nassert.equal(dis.start(), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "d0e398f9-5764-43a1-a7f9-35a45033c913",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a6f53a41-5dfa-4a8a-b5f3-1cbce3130174",
              "d0e398f9-5764-43a1-a7f9-35a45033c913"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3fde680b-346e-47b6-9f76-b0d1db4916ff",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return standard description",
                "fullTitle": "Test Basic Display update method should return standard description",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\");\nvar initDis = new _Basic.Basic(\"standard desc\", \"initial desc\");\nassert.equal(dis.update(), \"standard desc\");\nassert.notEqual(initDis.update(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "a59c6379-6ba1-48e0-a36a-882ab8df04d8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a59c6379-6ba1-48e0-a36a-882ab8df04d8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b9030d90-145b-4d13-9737-d3ffd63d11db",
        "title": "Test DisplayManager",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
        "file": "/test/DIsplays/DisplayManagerTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d1e3bc44-80d6-47ce-a359-888478db86c7",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if displayManager is not an object",
                "fullTitle": "Test DisplayManager constructor should throw error if displayManager is not an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var fn = function fn() {\n    new _DisplayManager.DisplayManager(0);\n};\nassert.throws(fn, 'displayMaps must be an object.');",
                "err": {},
                "isRoot": false,
                "uuid": "85533816-6cef-4ad9-87ca-cef16b3da729",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should derive displayMap from given displayName",
                "fullTitle": "Test DisplayManager constructor should derive displayMap from given displayName",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initDisplayMap = dm.displayMap;\nassert.deepEqual(initDisplayMap, { display: dis });",
                "err": {},
                "isRoot": false,
                "uuid": "0ba83f87-d10f-4220-aa16-3386ba9c291c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "85533816-6cef-4ad9-87ca-cef16b3da729",
              "0ba83f87-d10f-4220-aa16-3386ba9c291c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7dbde86a-920a-44b9-b8ef-e57f63b3a9e5",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return current display's description",
                "fullTitle": "Test DisplayManager start method should return current display's description",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = dm.start();\nassert.equal(start, \"I am a standard description\");",
                "err": {},
                "isRoot": false,
                "uuid": "bb603aeb-6f74-4b42-9117-06b87ba6e7c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return display from passed displayName",
                "fullTitle": "Test DisplayManager start method should return display from passed displayName",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = dm.start(null, \"test2\");\nassert.equal(start, \"I am a secodairy description\");",
                "err": {},
                "isRoot": false,
                "uuid": "2dab1055-77e3-48fc-9929-bba31df5ca99",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should pass world data to current display",
                "fullTitle": "Test DisplayManager start method should pass world data to current display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = worldDm.start({ msg: \"Message for standard description\" });\nassert.equal(start, \"Message for standard description\");",
                "err": {},
                "isRoot": false,
                "uuid": "630dddc6-e6e9-4678-a7f9-25907885e3ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should pass world data to secondairy display",
                "fullTitle": "Test DisplayManager start method should pass world data to secondairy display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = worldDm.start({ msg: \"Message for secondairy description\" });\nassert.equal(start, \"Message for secondairy description\");",
                "err": {},
                "isRoot": false,
                "uuid": "edc4857f-f350-453a-97fd-32ef4c549f4b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bb603aeb-6f74-4b42-9117-06b87ba6e7c2",
              "2dab1055-77e3-48fc-9929-bba31df5ca99",
              "630dddc6-e6e9-4678-a7f9-25907885e3ad",
              "edc4857f-f350-453a-97fd-32ef4c549f4b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "cd58e0f8-735a-4502-868b-3928440a0940",
            "title": "shouldTransition method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false when no to is specified",
                "fullTitle": "Test DisplayManager shouldTransition method should return false when no to is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dm.shouldTransition();\nassert.equal(start, false);",
                "err": {},
                "isRoot": false,
                "uuid": "69aee317-0e86-486f-8c08-e76a711a1fd8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return false when there are no valid transactions",
                "fullTitle": "Test DisplayManager shouldTransition method should return false when there are no valid transactions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmFalseTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return false;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmFalseTran.shouldTransition();\nassert.equal(start, false);",
                "err": {},
                "isRoot": false,
                "uuid": "1b1ba2da-9f22-467f-8c83-ff90cb88b490",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a display name when there is a valid transaction and no prioity is specified",
                "fullTitle": "Test DisplayManager shouldTransition method should return a display name when there is a valid transaction and no prioity is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmValidTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return true;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmValidTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "d0803e3f-9767-4588-b67a-d97aaf31a584",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the first display name when no valid transactions have priority",
                "fullTitle": "Test DisplayManager shouldTransition method should return the first display name when no valid transactions have priority",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return true;\n            } }, { name: \"test3\", condition: function condition() {\n                return true;\n            } }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "16cd3e6e-7e69-47cd-8ea9-422162cc8793",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the first display name when there are tied priority valid transactions",
                "fullTitle": "Test DisplayManager shouldTransition method should return the first display name when there are tied priority valid transactions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return true;\n            }, priority: 1 }, { name: \"test3\", condition: function condition() {\n                return true;\n            }, priority: 1 }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "8cf36f40-a30f-4fca-932a-a6da5836dd21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an invalid transaction",
                "fullTitle": "Test DisplayManager shouldTransition method should not return an invalid transaction",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return false;\n            }, priority: 1 }, { name: \"test3\", condition: function condition() {\n                return true;\n            }, priority: 2 }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test3\");",
                "err": {},
                "isRoot": false,
                "uuid": "68558223-cc11-425b-acae-21d03385e9ae",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "69aee317-0e86-486f-8c08-e76a711a1fd8",
              "1b1ba2da-9f22-467f-8c83-ff90cb88b490",
              "d0803e3f-9767-4588-b67a-d97aaf31a584",
              "16cd3e6e-7e69-47cd-8ea9-422162cc8793",
              "8cf36f40-a30f-4fca-932a-a6da5836dd21",
              "68558223-cc11-425b-acae-21d03385e9ae"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a6e4a593-8763-48ef-beae-5bb122cd7057",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return updated display when to is not specified",
                "fullTitle": "Test DisplayManager update method should return updated display when to is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dm.update();\nassert.equal(start, \"update1\");",
                "err": {},
                "isRoot": false,
                "uuid": "f7670922-dfd0-4442-95d9-34a50fdf5309",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return updated display when to is specified but no transition takes place",
                "fullTitle": "Test DisplayManager update method should return updated display when to is specified but no transition takes place",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmFalseTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return false;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmFalseTran.update();\nassert.equal(start, \"update1\");",
                "err": {},
                "isRoot": false,
                "uuid": "24a94f97-47cc-47a7-9798-6443adea21fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return started display of transition when a transition takes place",
                "fullTitle": "Test DisplayManager update method should return started display of transition when a transition takes place",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmValidTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return true;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmValidTran.update();\nassert.equal(start, \"start2\");",
                "err": {},
                "isRoot": false,
                "uuid": "15ea3525-7a76-4fb5-b5b8-346db5ee9a80",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f7670922-dfd0-4442-95d9-34a50fdf5309",
              "24a94f97-47cc-47a7-9798-6443adea21fb",
              "15ea3525-7a76-4fb5-b5b8-346db5ee9a80"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "a9638bf9-f2f5-463f-8e11-5519b7d94feb",
            "title": "stop method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return stop in display",
                "fullTitle": "Test DisplayManager stop method should return stop in display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar stop = dm.stop();\nassert.equal(stop, \"stop\");",
                "err": {},
                "isRoot": false,
                "uuid": "e108222a-5fc6-4634-8589-fa4036ab8a01",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e108222a-5fc6-4634-8589-fa4036ab8a01"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6dbd4d25-568c-4e63-8bd5-29b2bd434f36",
        "title": "Test Flipbook Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
        "file": "/test/DIsplays/FlipbookDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8cab0e6c-5452-48ae-84e5-41360ffa7135",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the first page",
                "fullTitle": "Test Flipbook Display start method should return the first page",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([\"This is a page\"]);\nassert.equal(des.start({ tick: 0 }), \"This is a page\");",
                "err": {},
                "isRoot": false,
                "uuid": "cb5c4a27-460a-4f34-afe7-dbbd581dcb06",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return undefined if first page has delay specified",
                "fullTitle": "Test Flipbook Display start method should return undefined if first page has delay specified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 1]]);\nassert.isUndefined(des.start({ tick: 0 }));",
                "err": {},
                "isRoot": false,
                "uuid": "9b5b852e-ffe5-4712-a1ba-91c080760036",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should wait ticks if first page has delay specified",
                "fullTitle": "Test Flipbook Display start method should wait ticks if first page has delay specified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\nassert.isUndefined(des.start({ tick: 0 }));\nassert.equal(des.update({ tick: 2 }), \"This is a page\");",
                "err": {},
                "isRoot": false,
                "uuid": "e5706f6a-326f-4a6c-ad6e-a87c85370f52",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cb5c4a27-460a-4f34-afe7-dbbd581dcb06",
              "9b5b852e-ffe5-4712-a1ba-91c080760036",
              "e5706f6a-326f-4a6c-ad6e-a87c85370f52"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2ef23ad8-4bb5-495c-bac4-81c5320da582",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if instance has not been started yet",
                "fullTitle": "Test Flipbook Display update method should throw error if instance has not been started yet",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\nvar fn = function fn() {\n    return des.update({ tick: 1 });\n};\nassert.throws(fn, \"Flipbook must be started before it is updated.\");",
                "err": {},
                "isRoot": false,
                "uuid": "d496687a-38cc-4f8d-9a64-0c698b537a48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return undefined if initial scene has not started yet",
                "fullTitle": "Test Flipbook Display update method should return undefined if initial scene has not started yet",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\ndes.start({ tick: 0 });\nassert.isUndefined(des.update({ tick: 1 }));",
                "err": {},
                "isRoot": false,
                "uuid": "08156589-6859-46ae-9d2f-5cf25d333616",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "47820cd7-e0af-41b7-8bb4-539675bab383",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "a3cfd8e0-cfe6-474b-b81c-cce8cb778c4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "7c9f8e2e-17ba-4a96-8536-4c78c085ec7e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "aba02833-a80e-4d8c-9b75-ef022aef5217",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the current scence if no time passes but there are multiple 0 tick pages",
                "fullTitle": "Test Flipbook Display update method should return the current scence if no time passes but there are multiple 0 tick pages",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"target page\", 0], [\"This is a second page\", 0]]);\ndes.start({ tick: 0 });\nassert.equal(des.update({ tick: 0 }), \"target page\");",
                "err": {},
                "isRoot": false,
                "uuid": "af7b9185-3bee-457b-a5ee-d706eada793d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "f0447fc0-ff00-4854-af1f-83e305c64510",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "54b32b43-b907-43fa-93e1-c7a7425f47ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "7e3d9ec0-b8e5-412a-a05b-999b78dae638",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return last scene if delay is greater than last scene's delay",
                "fullTitle": "Test Flipbook Display update method should return last scene if delay is greater than last scene's delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 0], [\"This is a second page\", 10], [\"This is the last page\", 10]]);\ndes.start({ tick: 0 });\nassert.equal(des.update({ tick: 30 }), \"This is the last page\");",
                "err": {},
                "isRoot": false,
                "uuid": "fa1662f0-c013-4886-89ee-046a9c695b1e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return last scene if in previous update last scene had been reached",
                "fullTitle": "Test Flipbook Display update method should return last scene if in previous update last scene had been reached",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 0], [\"This is the last page\", 10]]);\ndes.start({ tick: 0 });\ndes.update({ tick: 10 });\nassert.equal(des.update({ tick: 20 }), \"This is the last page\");",
                "err": {},
                "isRoot": false,
                "uuid": "20863992-04c3-4ac2-ae8b-c5aa69b6b775",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "d3bbfbd8-4d2f-4f7e-809a-46b1a8fa00e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "c9783361-f14d-4e90-a610-69f8b30eb7aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "0a46a5a7-dabc-4f49-9df3-d956b09bc4f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d496687a-38cc-4f8d-9a64-0c698b537a48",
              "08156589-6859-46ae-9d2f-5cf25d333616",
              "47820cd7-e0af-41b7-8bb4-539675bab383",
              "a3cfd8e0-cfe6-474b-b81c-cce8cb778c4a",
              "7c9f8e2e-17ba-4a96-8536-4c78c085ec7e",
              "aba02833-a80e-4d8c-9b75-ef022aef5217",
              "af7b9185-3bee-457b-a5ee-d706eada793d",
              "f0447fc0-ff00-4854-af1f-83e305c64510",
              "54b32b43-b907-43fa-93e1-c7a7425f47ed",
              "7e3d9ec0-b8e5-412a-a05b-999b78dae638",
              "fa1662f0-c013-4886-89ee-046a9c695b1e",
              "20863992-04c3-4ac2-ae8b-c5aa69b6b775",
              "d3bbfbd8-4d2f-4f7e-809a-46b1a8fa00e9",
              "c9783361-f14d-4e90-a610-69f8b30eb7aa",
              "0a46a5a7-dabc-4f49-9df3-d956b09bc4f8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "8e5a8d8f-11a1-42b1-9bd1-e0802b120fa6",
            "title": "formatPage",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return proper object from string",
                "fullTitle": "Test Flipbook Display formatPage should return proper object from string",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = \"This is a page\";\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: page, delay: 0 });",
                "err": {},
                "isRoot": false,
                "uuid": "3e0483b3-158f-4ecf-9650-444322d99984",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and array length is not 2",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and array length is not 2",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\"];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page array must have exactly 2 items.\");",
                "err": {},
                "isRoot": false,
                "uuid": "953c8168-6c95-4c9e-958d-9500a95822a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and first item in array is not string",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and first item in array is not string",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [1, 2];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"is not a string. First item in page array must be a string.\");",
                "err": {},
                "isRoot": false,
                "uuid": "87c779a6-25ec-4848-8278-cbd411d848a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and second item in array is not a postive number",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and second item in array is not a postive number",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\", \"not a number\"];\nvar negPage = [\"This is a page\", -2];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nvar funcneg = function funcneg() {\n    return (0, _Flipbook.formatPage)(negPage);\n};\nassert.throws(func, \"Second item in page array must be a postive number.\");\nassert.throws(funcneg, \"Second item in page array must be a postive number.\");",
                "err": {},
                "isRoot": false,
                "uuid": "43eb9fc8-bd2d-425a-9d9f-372fd8a1736a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper object from array",
                "fullTitle": "Test Flipbook Display formatPage should return proper object from array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\", 10];\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: \"This is a page\", delay: 10 });",
                "err": {},
                "isRoot": false,
                "uuid": "4444df6c-0f9d-4f90-b16d-3d9eea598c60",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given object and object does not have desc property.",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given object and object does not have desc property.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { delay: 1 };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page object must have an desc property.\");",
                "err": {},
                "isRoot": false,
                "uuid": "d1ddaef6-20f5-4e17-87d7-d20391a06e50",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given object has a delay property and it is not a postive number.",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given object has a delay property and it is not a postive number.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\", delay: \"not a number\" };\nvar negPage = { desc: \"This is a page\", delay: -1 };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nvar funcneg = function funcneg() {\n    return (0, _Flipbook.formatPage)(negPage);\n};\nassert.throws(func, \"A page object's delay property must be a postive number.\");\nassert.throws(funcneg, \"A page object's delay property must be a postive number.\");",
                "err": {},
                "isRoot": false,
                "uuid": "0ea042bf-7cb4-487b-a4b1-6f904c31b0b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add delay property of 0 if object does not have delay property",
                "fullTitle": "Test Flipbook Display formatPage should add delay property of 0 if object does not have delay property",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\" };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.equal((0, _Flipbook.formatPage)(page).delay, 0);",
                "err": {},
                "isRoot": false,
                "uuid": "4dcd5e05-518e-44ed-932e-0e0772ba486b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return object from object",
                "fullTitle": "Test Flipbook Display formatPage should return object from object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\", delay: 10 };\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: \"This is a page\", delay: 10 });",
                "err": {},
                "isRoot": false,
                "uuid": "0f66963d-8d13-4556-85a1-89acb174cd81",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an error if the given argument is not an object, array, or string.",
                "fullTitle": "Test Flipbook Display formatPage should return an error if the given argument is not an object, array, or string.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = 10;\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page should be an object, array, or string.\");",
                "err": {},
                "isRoot": false,
                "uuid": "b7bdd8a7-3d17-4509-9cbc-db3f0d173533",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3e0483b3-158f-4ecf-9650-444322d99984",
              "953c8168-6c95-4c9e-958d-9500a95822a4",
              "87c779a6-25ec-4848-8278-cbd411d848a0",
              "43eb9fc8-bd2d-425a-9d9f-372fd8a1736a",
              "4444df6c-0f9d-4f90-b16d-3d9eea598c60",
              "d1ddaef6-20f5-4e17-87d7-d20391a06e50",
              "0ea042bf-7cb4-487b-a4b1-6f904c31b0b3",
              "4dcd5e05-518e-44ed-932e-0e0772ba486b",
              "0f66963d-8d13-4556-85a1-89acb174cd81",
              "b7bdd8a7-3d17-4509-9cbc-db3f0d173533"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1d184954-1b6f-4802-ac51-2046db985180",
        "title": "Test Time Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
        "file": "/test/DIsplays/TimeDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "307e6fc6-06e8-4c62-8dcf-7a8487a36052",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if times argument is not an object",
                "fullTitle": "Test Time Display constructor should throw error if times argument is not an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Time.Time(1);\n};\nassert.throws(func, 'times must be an object.');",
                "err": {},
                "isRoot": false,
                "uuid": "dca41e41-3bba-44c8-b185-b92f4aed5dd9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dca41e41-3bba-44c8-b185-b92f4aed5dd9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9446848a-dc7c-4fd3-ab06-52282d2a9e33",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return initial description if it is specified",
                "fullTitle": "Test Time Display start method should return initial description if it is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({}, \"standard desc\", \"initial desc\");\nassert.equal(dis.start(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "98544508-4765-4735-820b-f2a2aaa0e08b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return update based description if initial description is not specified",
                "fullTitle": "Test Time Display start method should return update based description if initial description is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.start({ timeOfDay: \"morn\" }), \"This is a morning description\");",
                "err": {},
                "isRoot": false,
                "uuid": "842285e0-44e5-4815-a5dd-f1131d4dd29c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "98544508-4765-4735-820b-f2a2aaa0e08b",
              "842285e0-44e5-4815-a5dd-f1131d4dd29c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6e1f6353-0f2b-4cd8-8471-ec573ffe4ffc",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return time-based description if that time's description is specified",
                "fullTitle": "Test Time Display update method should return time-based description if that time's description is specified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update({ timeOfDay: \"morn\" }), \"This is a morning description\");",
                "err": {},
                "isRoot": false,
                "uuid": "b7e9fa3f-feb9-4bf9-b790-a0d40655a642",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the standard description if the time's description is not specified",
                "fullTitle": "Test Time Display update method should return the standard description if the time's description is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update({ timeOfDay: \"noon\" }), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "7694ca0e-ab93-4f0e-8062-3c1a6c87d6d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the standard description if world argument is not passed",
                "fullTitle": "Test Time Display update method should return the standard description if world argument is not passed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update(), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "a1d9ef6c-83dc-47ef-a360-337804a022cf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b7e9fa3f-feb9-4bf9-b790-a0d40655a642",
              "7694ca0e-ab93-4f0e-8062-3c1a6c87d6d6",
              "a1d9ef6c-83dc-47ef-a360-337804a022cf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "00e5eeab-12fc-4200-ad38-8c99d11a4229",
        "title": "Reducer",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Reducers/IndexTest.js",
        "file": "/test/Reducers/IndexTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return initial state when state is not specified",
            "fullTitle": "Reducer should return initial state when state is not specified",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_chai.assert.equal((0, _index2.default)(), _index.initialState);",
            "err": {},
            "isRoot": false,
            "uuid": "5dba527b-568f-4da1-8721-cecda2863cef",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "changeRoom action should store room info",
            "fullTitle": "Reducer changeRoom action should store room info",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: actions.CHANGE_ROOM, room: _GameObjects.ROOMS.TEST, display: \"display\" };\nvar exits = [\"north\", \"south\", \"east\", \"west\"];\n_chai.assert.deepEqual((0, _index2.default)(_index.initialState, action), Object.assign({}, _index.initialState, {\n    room: _GameObjects.ROOMS.TEST, display: \"display\", exits: exits }));",
            "err": {},
            "isRoot": false,
            "uuid": "ec091221-4cd6-4c9b-b185-c8f3ddf4553f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "changeDisplay action should store display info",
            "fullTitle": "Reducer changeDisplay action should store display info",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: actions.CHANGE_DISPLAY, display: \"display\" };\n_chai.assert.deepEqual((0, _index2.default)(_index.initialState, action), Object.assign({}, _index.initialState, {\n    display: \"display\" }));",
            "err": {},
            "isRoot": false,
            "uuid": "110c9e1a-c06c-4b3e-abc0-894829dbf9d8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "updateTick action should store new tick in world state",
            "fullTitle": "Reducer updateTick action should store new tick in world state",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: actions.UPDATE_TICK, tick: 10 };\n_chai.assert.deepEqual((0, _index2.default)(_index.initialState, action), Object.assign({}, _index.initialState, {\n    world: Object.assign({}, _index.initialState.world, { tick: 10 }) }));",
            "err": {},
            "isRoot": false,
            "uuid": "3900e023-6c91-409d-866f-9098dc35aa2e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5dba527b-568f-4da1-8721-cecda2863cef",
          "ec091221-4cd6-4c9b-b185-c8f3ddf4553f",
          "110c9e1a-c06c-4b3e-abc0-894829dbf9d8",
          "3900e023-6c91-409d-866f-9098dc35aa2e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f8b1f553-717c-46ff-a649-7dc2f5610f8e",
        "title": "genExits",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Reducers/genExitsTest.js",
        "file": "/test/Reducers/genExitsTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return unchanged state if room is not specified in the action",
            "fullTitle": "genExits should return unchanged state if room is not specified in the action",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var state = { key: \"value\", exits: undefined };\n_chai.assert.equal((0, _genExits2.default)(state, {}), state);",
            "err": {},
            "isRoot": false,
            "uuid": "dee47d12-5627-40eb-b522-a32d31c0bae5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should convert room object values to array",
            "fullTitle": "genExits should convert room object values to array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var state = { key: \"value\", exits: undefined };\n_chai.assert.deepEqual((0, _genExits2.default)(state, { room: _GameObjects.ROOMS.TEST }), Object.assign({}, state, { exits: [\"north\", \"south\", \"east\", \"west\"] }));",
            "err": {},
            "isRoot": false,
            "uuid": "15acf8a5-3987-4889-84a8-e56a99a6071e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "dee47d12-5627-40eb-b522-a32d31c0bae5",
          "15acf8a5-3987-4889-84a8-e56a99a6071e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6bcc72bd-873a-4433-a4f8-e661f40cc3c2",
        "title": "Tests configured",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/setupTests.js",
        "file": "/test/setupTests.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "",
            "fullTitle": "Tests configured ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return true;",
            "err": {},
            "isRoot": false,
            "uuid": "c755f14d-1d78-4d6d-9ea2-1f8e81b956d4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c755f14d-1d78-4d6d-9ea2-1f8e81b956d4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}
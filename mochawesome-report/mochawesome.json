{
  "stats": {
    "suites": 20,
    "tests": 55,
    "passes": 55,
    "pending": 0,
    "failures": 0,
    "start": "2018-07-03T04:27:41.115Z",
    "end": "2018-07-03T04:27:41.167Z",
    "duration": 52,
    "testsRegistered": 55,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "374628ff-98fa-4c77-960f-c64fccd1108c",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "1671616d-6231-43d7-8303-4a823c49636d",
        "title": "<Exits/>",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Components/ExitsCompTest.js",
        "file": "/test/Components/ExitsCompTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should render ul with length of exits",
            "fullTitle": "<Exits/> should render ul with length of exits",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var props = [1, 1, 1, 1];\nvar wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Exits.Exits, { exits: props, __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n    },\n    __self: _this\n}));\n_chai.assert.lengthOf(wrapper.find(\"ul\").children(), 4);",
            "err": {},
            "isRoot": false,
            "uuid": "b2aa481a-bf77-442c-89f1-2bdbb08d2781",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b2aa481a-bf77-442c-89f1-2bdbb08d2781"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 11,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "25031739-afe8-4d0d-8970-2e31243f3afa",
        "title": "Test Basic Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
        "file": "/test/DIsplays/BasicDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2e1adc0f-efc1-487d-864d-286c65dc4a6f",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if standard argument is not a string",
                "fullTitle": "Test Basic Display constructor should throw error if standard argument is not a string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Basic.Basic(1);\n};\nassert.throws(func, 'Standard description must be a string.');",
                "err": {},
                "isRoot": false,
                "uuid": "f79d02d6-e544-4586-83f5-3287cbaa280b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if initDesc argument is passed and is not a string",
                "fullTitle": "Test Basic Display constructor should throw error if initDesc argument is passed and is not a string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Basic.Basic(\"\", 3);\n};\nassert.throws(func, 'Initial description must be a string.');",
                "err": {},
                "isRoot": false,
                "uuid": "7a437beb-4c3d-4ab1-8a56-77f3ab10ef7d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f79d02d6-e544-4586-83f5-3287cbaa280b",
              "7a437beb-4c3d-4ab1-8a56-77f3ab10ef7d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "83066c11-3a5f-4b07-a975-269660c3a06d",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return initial description if it is specified",
                "fullTitle": "Test Basic Display start method should return initial description if it is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\", \"initial desc\");\nassert.equal(dis.start(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "9cb203fc-97f0-40f7-9367-eef11b96c942",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return standard description if initial description is not specified",
                "fullTitle": "Test Basic Display start method should return standard description if initial description is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\");\nassert.equal(dis.start(), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "4df6ef81-5588-4ce7-bf91-515407ece174",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9cb203fc-97f0-40f7-9367-eef11b96c942",
              "4df6ef81-5588-4ce7-bf91-515407ece174"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "98f0ee8c-ee73-4080-bb48-db5d1f540cb3",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return standard description",
                "fullTitle": "Test Basic Display update method should return standard description",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\");\nvar initDis = new _Basic.Basic(\"standard desc\", \"initial desc\");\nassert.equal(dis.update(), \"standard desc\");\nassert.notEqual(initDis.update(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "4b5be21c-69a3-4391-9e5e-7a10c6b5742e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4b5be21c-69a3-4391-9e5e-7a10c6b5742e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ecbe53e5-e548-474e-a206-74e3da10029b",
        "title": "Test DisplayManager",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
        "file": "/test/DIsplays/DisplayManagerTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "63b18990-a05a-4956-9141-d8ce3e997409",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should derive displayMap from given displayName",
                "fullTitle": "Test DisplayManager constructor should derive displayMap from given displayName",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initDisplayMap = dm.displayMap;\nassert.deepEqual(initDisplayMap, { display: dis });",
                "err": {},
                "isRoot": false,
                "uuid": "5e8bca90-91c6-4254-8c14-3de7207b545d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5e8bca90-91c6-4254-8c14-3de7207b545d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f92180f3-254c-48f6-9fff-5428061a7679",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return current display's description",
                "fullTitle": "Test DisplayManager start method should return current display's description",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = dm.start();\nassert.equal(start, \"I am a standard description\");",
                "err": {},
                "isRoot": false,
                "uuid": "da8b9f05-6a8d-4753-b525-a4fa797e7d1e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return display from passed displayName",
                "fullTitle": "Test DisplayManager start method should return display from passed displayName",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = dm.start(null, \"test2\");\nassert.equal(start, \"I am a secodairy description\");",
                "err": {},
                "isRoot": false,
                "uuid": "f6e2099e-d082-40cc-bd77-899da912ae21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should pass world data to current display",
                "fullTitle": "Test DisplayManager start method should pass world data to current display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = worldDm.start({ msg: \"Message for standard description\" });\nassert.equal(start, \"Message for standard description\");",
                "err": {},
                "isRoot": false,
                "uuid": "9450b679-9a0e-447f-86d8-d44f6d3e4e71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should pass world data to secondairy display",
                "fullTitle": "Test DisplayManager start method should pass world data to secondairy display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = worldDm.start({ msg: \"Message for secondairy description\" });\nassert.equal(start, \"Message for secondairy description\");",
                "err": {},
                "isRoot": false,
                "uuid": "c8b086e6-97b7-4565-add5-1596b1354ab6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "da8b9f05-6a8d-4753-b525-a4fa797e7d1e",
              "f6e2099e-d082-40cc-bd77-899da912ae21",
              "9450b679-9a0e-447f-86d8-d44f6d3e4e71",
              "c8b086e6-97b7-4565-add5-1596b1354ab6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5bba025d-2422-4229-9863-6eb0bf9dcc8f",
            "title": "shouldTransition method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false when no to is specified",
                "fullTitle": "Test DisplayManager shouldTransition method should return false when no to is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dm.shouldTransition();\nassert.equal(start, false);",
                "err": {},
                "isRoot": false,
                "uuid": "de41ffb6-b774-44a1-a708-97cefa693d19",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return false when there are no valid transactions",
                "fullTitle": "Test DisplayManager shouldTransition method should return false when there are no valid transactions",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmFalseTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return false;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmFalseTran.shouldTransition();\nassert.equal(start, false);",
                "err": {},
                "isRoot": false,
                "uuid": "83f1f67a-54df-49ac-8ca1-89c05eb07853",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a display name when there is a valid transaction and no prioity is specified",
                "fullTitle": "Test DisplayManager shouldTransition method should return a display name when there is a valid transaction and no prioity is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmValidTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return true;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmValidTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "15426805-5111-41d2-8cf0-ccd9191f5a47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the first display name when no valid transactions have priority",
                "fullTitle": "Test DisplayManager shouldTransition method should return the first display name when no valid transactions have priority",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return true;\n            } }, { name: \"test3\", condition: function condition() {\n                return true;\n            } }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "0da4bc7e-66bf-411e-8138-95df7fc2896c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the first display name when there are tied priority valid transactions",
                "fullTitle": "Test DisplayManager shouldTransition method should return the first display name when there are tied priority valid transactions",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return true;\n            }, priority: 1 }, { name: \"test3\", condition: function condition() {\n                return true;\n            }, priority: 1 }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "f95bef2a-8977-4a8d-aa50-976b4718c6d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an invalid transaction",
                "fullTitle": "Test DisplayManager shouldTransition method should not return an invalid transaction",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return false;\n            }, priority: 1 }, { name: \"test3\", condition: function condition() {\n                return true;\n            }, priority: 2 }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test3\");",
                "err": {},
                "isRoot": false,
                "uuid": "f319076e-f4f1-477e-a60f-7bb15b89c083",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "de41ffb6-b774-44a1-a708-97cefa693d19",
              "83f1f67a-54df-49ac-8ca1-89c05eb07853",
              "15426805-5111-41d2-8cf0-ccd9191f5a47",
              "0da4bc7e-66bf-411e-8138-95df7fc2896c",
              "f95bef2a-8977-4a8d-aa50-976b4718c6d9",
              "f319076e-f4f1-477e-a60f-7bb15b89c083"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "886ac3cb-4af7-4393-980c-b37020000931",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return updated display when to is not specified",
                "fullTitle": "Test DisplayManager update method should return updated display when to is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dm.update();\nassert.equal(start, \"update1\");",
                "err": {},
                "isRoot": false,
                "uuid": "e74721e8-f203-4e53-992c-399f2ea19f56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return updated display when to is specified but no transition takes place",
                "fullTitle": "Test DisplayManager update method should return updated display when to is specified but no transition takes place",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmFalseTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return false;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmFalseTran.update();\nassert.equal(start, \"update1\");",
                "err": {},
                "isRoot": false,
                "uuid": "261d2f9c-3c68-48d1-95bf-860dccf90f3a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return started display of transition when a transition takes place",
                "fullTitle": "Test DisplayManager update method should return started display of transition when a transition takes place",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmValidTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return true;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmValidTran.update();\nassert.equal(start, \"start2\");",
                "err": {},
                "isRoot": false,
                "uuid": "cf6851c7-c695-4085-bbc0-63874eff0311",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e74721e8-f203-4e53-992c-399f2ea19f56",
              "261d2f9c-3c68-48d1-95bf-860dccf90f3a",
              "cf6851c7-c695-4085-bbc0-63874eff0311"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "83b4e789-fd70-40bc-8ed3-e59687690786",
            "title": "stop method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return stop in display",
                "fullTitle": "Test DisplayManager stop method should return stop in display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar stop = dm.stop();\nassert.equal(stop, \"stop\");",
                "err": {},
                "isRoot": false,
                "uuid": "7af559e8-55ee-471b-9314-bf8d3cb33984",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7af559e8-55ee-471b-9314-bf8d3cb33984"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "412c59fe-7a30-4c7f-8b36-64ba4a582d9d",
        "title": "Test Flipbook Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
        "file": "/test/DIsplays/FlipbookDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "742aafc9-b7bd-44c7-8368-eafb94c36852",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the first page",
                "fullTitle": "Test Flipbook Display start method should return the first page",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([\"This is a page\"]);\nassert.equal(des.start({ tick: 0 }), \"This is a page\");",
                "err": {},
                "isRoot": false,
                "uuid": "31fa102e-3f19-4d84-b3bf-525534d796c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return undefined if first page has delay specified",
                "fullTitle": "Test Flipbook Display start method should return undefined if first page has delay specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 1]]);\nassert.isUndefined(des.start({ tick: 0 }));",
                "err": {},
                "isRoot": false,
                "uuid": "df1ed2ff-1f87-4e88-aee2-b40931b92470",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should wait ticks if first page has delay specified",
                "fullTitle": "Test Flipbook Display start method should wait ticks if first page has delay specified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\nassert.isUndefined(des.start({ tick: 0 }));\nassert.equal(des.update({ tick: 2 }), \"This is a page\");",
                "err": {},
                "isRoot": false,
                "uuid": "85a47582-4d61-4dd3-b844-6badcc9f023f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "31fa102e-3f19-4d84-b3bf-525534d796c0",
              "df1ed2ff-1f87-4e88-aee2-b40931b92470",
              "85a47582-4d61-4dd3-b844-6badcc9f023f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "5e793519-4eb9-4369-b04d-5beb50a97363",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if instance has not been started yet",
                "fullTitle": "Test Flipbook Display update method should throw error if instance has not been started yet",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\nvar fn = function fn() {\n    return des.update({ tick: 1 });\n};\nassert.throws(fn, \"Flipbook must be started before it is updated.\");",
                "err": {},
                "isRoot": false,
                "uuid": "cf1d451b-342c-4239-9097-05b5f24f495f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return undefined if initial scene has not started yet",
                "fullTitle": "Test Flipbook Display update method should return undefined if initial scene has not started yet",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\ndes.start({ tick: 0 });\nassert.isUndefined(des.update({ tick: 1 }));",
                "err": {},
                "isRoot": false,
                "uuid": "d4558d4a-b0f1-4ed8-a00b-1747cca1596e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "7f25db58-ebff-42b0-938d-97288ee6f461",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "909e6da3-7ca8-4092-be3d-c1b1a16ca14b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "b4600570-dc78-4a7c-8877-5c7891bbfcbb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "fc917a42-e7f0-42a8-b6b0-d38870265ae2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "795e54d9-14f3-4138-a096-07e846db5911",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "c87ab26f-443c-4376-919f-afe9048793c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "cca63780-ec29-46e1-b9f5-b9e47bccf503",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return last scene if delay is greater than last scene's delay",
                "fullTitle": "Test Flipbook Display update method should return last scene if delay is greater than last scene's delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 0], [\"This is a second page\", 10], [\"This is the last page\", 10]]);\ndes.start({ tick: 0 });\nassert.equal(des.update({ tick: 30 }), \"This is the last page\");",
                "err": {},
                "isRoot": false,
                "uuid": "1ecb7325-f050-4069-bec0-798ac73c2d63",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return last scene if in previous update last scene had been reached",
                "fullTitle": "Test Flipbook Display update method should return last scene if in previous update last scene had been reached",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 0], [\"This is the last page\", 10]]);\ndes.start({ tick: 0 });\ndes.update({ tick: 10 });\nassert.equal(des.update({ tick: 20 }), \"This is the last page\");",
                "err": {},
                "isRoot": false,
                "uuid": "c51cd12d-17f4-4728-b02c-30b1b31ec82f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "713437ae-c71d-4dbe-a484-6a0e86a535b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "c2a582cb-4c17-4e7e-9a42-ef94765e8f92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "3b115d18-3d51-4b79-be16-2f5282c2225b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cf1d451b-342c-4239-9097-05b5f24f495f",
              "d4558d4a-b0f1-4ed8-a00b-1747cca1596e",
              "7f25db58-ebff-42b0-938d-97288ee6f461",
              "909e6da3-7ca8-4092-be3d-c1b1a16ca14b",
              "b4600570-dc78-4a7c-8877-5c7891bbfcbb",
              "fc917a42-e7f0-42a8-b6b0-d38870265ae2",
              "795e54d9-14f3-4138-a096-07e846db5911",
              "c87ab26f-443c-4376-919f-afe9048793c6",
              "cca63780-ec29-46e1-b9f5-b9e47bccf503",
              "1ecb7325-f050-4069-bec0-798ac73c2d63",
              "c51cd12d-17f4-4728-b02c-30b1b31ec82f",
              "713437ae-c71d-4dbe-a484-6a0e86a535b1",
              "c2a582cb-4c17-4e7e-9a42-ef94765e8f92",
              "3b115d18-3d51-4b79-be16-2f5282c2225b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "655786f5-371b-4826-9525-0532f0e937b7",
            "title": "formatPage",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return proper object from string",
                "fullTitle": "Test Flipbook Display formatPage should return proper object from string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = \"This is a page\";\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: page, delay: 0 });",
                "err": {},
                "isRoot": false,
                "uuid": "3d52dd01-32b7-40c9-b3a7-4911f74ef9f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and array length is not 2",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and array length is not 2",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\"];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page array must have exactly 2 items.\");",
                "err": {},
                "isRoot": false,
                "uuid": "f96ab743-7e33-483a-aeee-a4cdcf3e0fc9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and first item in array is not string",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and first item in array is not string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [1, 2];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"is not a string. First item in page array must be a string.\");",
                "err": {},
                "isRoot": false,
                "uuid": "9108b09f-2b1c-43bb-9b00-9ecbb33c79d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and second item in array is not a postive number",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and second item in array is not a postive number",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\", \"not a number\"];\nvar negPage = [\"This is a page\", -2];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nvar funcneg = function funcneg() {\n    return (0, _Flipbook.formatPage)(negPage);\n};\nassert.throws(func, \"Second item in page array must be a postive number.\");\nassert.throws(funcneg, \"Second item in page array must be a postive number.\");",
                "err": {},
                "isRoot": false,
                "uuid": "2decea8b-723a-4fa8-8d01-17a52797506e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper object from array",
                "fullTitle": "Test Flipbook Display formatPage should return proper object from array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\", 10];\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: \"This is a page\", delay: 10 });",
                "err": {},
                "isRoot": false,
                "uuid": "058771d0-1604-4450-b7ff-b0c073152b1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given object and object does not have desc property.",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given object and object does not have desc property.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { delay: 1 };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page object must have an desc property.\");",
                "err": {},
                "isRoot": false,
                "uuid": "3667b066-8070-41f0-953f-1a19daf5f032",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given object has a delay property and it is not a postive number.",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given object has a delay property and it is not a postive number.",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\", delay: \"not a number\" };\nvar negPage = { desc: \"This is a page\", delay: -1 };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nvar funcneg = function funcneg() {\n    return (0, _Flipbook.formatPage)(negPage);\n};\nassert.throws(func, \"A page object's delay property must be a postive number.\");\nassert.throws(funcneg, \"A page object's delay property must be a postive number.\");",
                "err": {},
                "isRoot": false,
                "uuid": "2a7192fc-6822-4111-861b-4ab0100f92b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add delay property of 0 if object does not have delay property",
                "fullTitle": "Test Flipbook Display formatPage should add delay property of 0 if object does not have delay property",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\" };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.equal((0, _Flipbook.formatPage)(page).delay, 0);",
                "err": {},
                "isRoot": false,
                "uuid": "79605df4-ac52-4402-af5a-503f6774b2a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return object from object",
                "fullTitle": "Test Flipbook Display formatPage should return object from object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\", delay: 10 };\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: \"This is a page\", delay: 10 });",
                "err": {},
                "isRoot": false,
                "uuid": "9d572c09-efe7-49e7-80ee-78225cfd4f49",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an error if the given argument is not an object, array, or string.",
                "fullTitle": "Test Flipbook Display formatPage should return an error if the given argument is not an object, array, or string.",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = 10;\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page should be an object, array, or string.\");",
                "err": {},
                "isRoot": false,
                "uuid": "aaf74393-79b8-47f7-b33d-ad5992577d24",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3d52dd01-32b7-40c9-b3a7-4911f74ef9f8",
              "f96ab743-7e33-483a-aeee-a4cdcf3e0fc9",
              "9108b09f-2b1c-43bb-9b00-9ecbb33c79d3",
              "2decea8b-723a-4fa8-8d01-17a52797506e",
              "058771d0-1604-4450-b7ff-b0c073152b1f",
              "3667b066-8070-41f0-953f-1a19daf5f032",
              "2a7192fc-6822-4111-861b-4ab0100f92b1",
              "79605df4-ac52-4402-af5a-503f6774b2a0",
              "9d572c09-efe7-49e7-80ee-78225cfd4f49",
              "aaf74393-79b8-47f7-b33d-ad5992577d24"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d519723e-20ad-4247-bd19-173f581add0a",
        "title": "Test Time Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
        "file": "/test/DIsplays/TimeDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8575fcaa-adb4-40c2-87e0-22436d356988",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if times argument is not an object",
                "fullTitle": "Test Time Display constructor should throw error if times argument is not an object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Time.Time(1);\n};\nassert.throws(func, 'times must be an object.');",
                "err": {},
                "isRoot": false,
                "uuid": "250a45b8-a908-4a26-9ccf-ece97a6e8465",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "250a45b8-a908-4a26-9ccf-ece97a6e8465"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "337608ee-d7bf-466b-88c1-30c69a05546d",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return initial description if it is specified",
                "fullTitle": "Test Time Display start method should return initial description if it is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({}, \"standard desc\", \"initial desc\");\nassert.equal(dis.start(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "23cd5705-ffec-417d-ad06-2fb47b981f34",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return update based description if initial description is not specified",
                "fullTitle": "Test Time Display start method should return update based description if initial description is not specified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.start({ timeOfDay: \"morn\" }), \"This is a morning description\");",
                "err": {},
                "isRoot": false,
                "uuid": "84aafc63-5d1b-4460-9e26-93cdedff0a24",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "23cd5705-ffec-417d-ad06-2fb47b981f34",
              "84aafc63-5d1b-4460-9e26-93cdedff0a24"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7b1c21cc-9b81-4053-8cf9-a8bbccd69390",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return time-based description if that time's description is specified",
                "fullTitle": "Test Time Display update method should return time-based description if that time's description is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update({ timeOfDay: \"morn\" }), \"This is a morning description\");",
                "err": {},
                "isRoot": false,
                "uuid": "eb484a69-76f2-4a36-a4c1-c29108143111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the standard description if the time's description is not specified",
                "fullTitle": "Test Time Display update method should return the standard description if the time's description is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update({ timeOfDay: \"noon\" }), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "e1958f0a-a91d-442e-b8cb-3be9856fb7a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the standard description if world argument is not passed",
                "fullTitle": "Test Time Display update method should return the standard description if world argument is not passed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update(), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "82aeb8ba-4dcc-4c2a-9403-728ab7cd813a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb484a69-76f2-4a36-a4c1-c29108143111",
              "e1958f0a-a91d-442e-b8cb-3be9856fb7a3",
              "82aeb8ba-4dcc-4c2a-9403-728ab7cd813a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "77666d94-f00b-403f-9003-81ee81e43573",
        "title": "Tests configured",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/setupTests.js",
        "file": "/test/setupTests.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "",
            "fullTitle": "Tests configured ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return true;",
            "err": {},
            "isRoot": false,
            "uuid": "095ed450-c4b2-4b4c-8d6a-bd603e2e46b1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "095ed450-c4b2-4b4c-8d6a-bd603e2e46b1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}
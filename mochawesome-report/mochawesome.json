{
  "stats": {
    "suites": 24,
    "tests": 63,
    "passes": 62,
    "pending": 0,
    "failures": 1,
    "start": "2018-07-04T06:03:35.124Z",
    "end": "2018-07-04T06:03:35.259Z",
    "duration": 135,
    "testsRegistered": 63,
    "passPercent": 98.4,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e90a29fc-085c-443f-893b-4754c584245f",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "d926f33d-ecff-4e96-a201-25b372db79d3",
        "title": "<App />",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Components/AppCompTest.js",
        "file": "/test/Components/AppCompTest.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "<App /> \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "props = {\n    display: { start: function start() {}, update: function update() {}, end: function end() {} },\n    room: \"\",\n    exits: [\"\", \"\"]\n};\napp = undefined;",
            "err": {},
            "isRoot": false,
            "uuid": "cce718f5-6a13-4f5e-8c61-4b5ed7d83777",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "always renders a div",
            "fullTitle": "<App /> always renders a div",
            "timedOut": false,
            "duration": 56,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var divs = Game().find(\"div\");\n_chai.assert.isAbove(divs.length, 0);",
            "err": {},
            "isRoot": false,
            "uuid": "a5288eea-72d8-481e-bdb6-66f5c7624830",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "07a0533d-43f2-40ab-9cc8-7af97581e334",
            "title": "the rendered div",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Components/AppCompTest.js",
            "file": "/test/Components/AppCompTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "contains everything else that gets rendered",
                "fullTitle": "<App /> the rendered div contains everything else that gets rendered",
                "timedOut": false,
                "duration": 11,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var divs = Game().find(\"div\");\nvar wrappingDiv = divs.first();\n_chai.assert.equal(wrappingDiv.children(), Game().children);",
                "err": {
                  "message": "AssertionError: expected { length: 2 } to equal [Function: children]",
                  "estack": "AssertionError: expected { length: 2 } to equal [Function: children]\n    at Context.<anonymous> (test/Components/AppCompTest.js:38:20)"
                },
                "isRoot": false,
                "uuid": "929d89fe-01e9-4e39-ae4e-a1e9a9309fd7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "929d89fe-01e9-4e39-ae4e-a1e9a9309fd7"
            ],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [
          "a5288eea-72d8-481e-bdb6-66f5c7624830"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 56,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9e28321f-963c-4648-bfdb-90000de49526",
        "title": "<Exits/>",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Components/ExitsCompTest.js",
        "file": "/test/Components/ExitsCompTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should render ul with length of exits",
            "fullTitle": "<Exits/> should render ul with length of exits",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var props = [1, 1, 1, 1];\nvar wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Exits.Exits, { exits: props, __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n    },\n    __self: _this\n}));\n_chai.assert.lengthOf(wrapper.find(\"ul\").children(), 4);",
            "err": {},
            "isRoot": false,
            "uuid": "44ecdaa4-ddb7-44ba-934f-30de4ca3d39a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "44ecdaa4-ddb7-44ba-934f-30de4ca3d39a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b72f587f-52cd-4017-9208-48fc68f2a23d",
        "title": "Test Basic Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
        "file": "/test/DIsplays/BasicDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "defdf3e9-1e36-439e-b223-36c905c19682",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if standard argument is not a string",
                "fullTitle": "Test Basic Display constructor should throw error if standard argument is not a string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Basic.Basic(1);\n};\nassert.throws(func, 'Standard description must be a string.');",
                "err": {},
                "isRoot": false,
                "uuid": "c47359e2-41be-4d09-ae7c-43a77bb37366",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if initDesc argument is passed and is not a string",
                "fullTitle": "Test Basic Display constructor should throw error if initDesc argument is passed and is not a string",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Basic.Basic(\"\", 3);\n};\nassert.throws(func, 'Initial description must be a string.');",
                "err": {},
                "isRoot": false,
                "uuid": "6369d6d3-12f2-4e19-99cb-3cba6cb71161",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c47359e2-41be-4d09-ae7c-43a77bb37366",
              "6369d6d3-12f2-4e19-99cb-3cba6cb71161"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "94b05af8-9474-40cf-bb5e-a2540380f5e9",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return initial description if it is specified",
                "fullTitle": "Test Basic Display start method should return initial description if it is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\", \"initial desc\");\nassert.equal(dis.start(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "c8795fcd-73d0-49c2-a69e-e6b6b070e4a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return standard description if initial description is not specified",
                "fullTitle": "Test Basic Display start method should return standard description if initial description is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\");\nassert.equal(dis.start(), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "40be472d-cb1f-479b-a944-b43c6b4d9a7f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8795fcd-73d0-49c2-a69e-e6b6b070e4a6",
              "40be472d-cb1f-479b-a944-b43c6b4d9a7f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "99066766-08ba-48e3-beec-fedde43a2d53",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/BasicDisplayTest.js",
            "file": "/test/DIsplays/BasicDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return standard description",
                "fullTitle": "Test Basic Display update method should return standard description",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Basic.Basic(\"standard desc\");\nvar initDis = new _Basic.Basic(\"standard desc\", \"initial desc\");\nassert.equal(dis.update(), \"standard desc\");\nassert.notEqual(initDis.update(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "c648d285-b0a9-4eb3-8620-f3d294779856",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c648d285-b0a9-4eb3-8620-f3d294779856"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a935e413-31d0-422a-ae4e-83ec8f507112",
        "title": "Test DisplayManager",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
        "file": "/test/DIsplays/DisplayManagerTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cc851114-0956-43c8-a89b-0a15e36bfe5f",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should derive displayMap from given displayName",
                "fullTitle": "Test DisplayManager constructor should derive displayMap from given displayName",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initDisplayMap = dm.displayMap;\nassert.deepEqual(initDisplayMap, { display: dis });",
                "err": {},
                "isRoot": false,
                "uuid": "e34e6a05-a72c-4a4b-8cf6-dfcdfc2dd743",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e34e6a05-a72c-4a4b-8cf6-dfcdfc2dd743"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1c9401ac-8808-4ea8-994e-036168c5dc1b",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return current display's description",
                "fullTitle": "Test DisplayManager start method should return current display's description",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = dm.start();\nassert.equal(start, \"I am a standard description\");",
                "err": {},
                "isRoot": false,
                "uuid": "84ebd252-158e-40d7-a3e5-8dab8a961092",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return display from passed displayName",
                "fullTitle": "Test DisplayManager start method should return display from passed displayName",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = dm.start(null, \"test2\");\nassert.equal(start, \"I am a secodairy description\");",
                "err": {},
                "isRoot": false,
                "uuid": "64fb892d-f450-4890-9141-a443f4902210",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should pass world data to current display",
                "fullTitle": "Test DisplayManager start method should pass world data to current display",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = worldDm.start({ msg: \"Message for standard description\" });\nassert.equal(start, \"Message for standard description\");",
                "err": {},
                "isRoot": false,
                "uuid": "f2761c3a-c11d-4f2f-ae98-9fb72532ed26",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should pass world data to secondairy display",
                "fullTitle": "Test DisplayManager start method should pass world data to secondairy display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var start = worldDm.start({ msg: \"Message for secondairy description\" });\nassert.equal(start, \"Message for secondairy description\");",
                "err": {},
                "isRoot": false,
                "uuid": "68b6e5a0-736e-4571-a457-f9c505456891",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "84ebd252-158e-40d7-a3e5-8dab8a961092",
              "64fb892d-f450-4890-9141-a443f4902210",
              "f2761c3a-c11d-4f2f-ae98-9fb72532ed26",
              "68b6e5a0-736e-4571-a457-f9c505456891"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3e47df6c-50ac-43a3-8279-7d7ba7454ca7",
            "title": "shouldTransition method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return false when no to is specified",
                "fullTitle": "Test DisplayManager shouldTransition method should return false when no to is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dm.shouldTransition();\nassert.equal(start, false);",
                "err": {},
                "isRoot": false,
                "uuid": "8a05ddbb-5d26-494d-8371-a7b7edce71be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return false when there are no valid transactions",
                "fullTitle": "Test DisplayManager shouldTransition method should return false when there are no valid transactions",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmFalseTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return false;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmFalseTran.shouldTransition();\nassert.equal(start, false);",
                "err": {},
                "isRoot": false,
                "uuid": "de574c6c-c5c4-4341-88ec-35311072e6b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a display name when there is a valid transaction and no prioity is specified",
                "fullTitle": "Test DisplayManager shouldTransition method should return a display name when there is a valid transaction and no prioity is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmValidTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return true;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmValidTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "fd3597f0-b84b-4432-98c3-05888005b3a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the first display name when no valid transactions have priority",
                "fullTitle": "Test DisplayManager shouldTransition method should return the first display name when no valid transactions have priority",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return true;\n            } }, { name: \"test3\", condition: function condition() {\n                return true;\n            } }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "7f3fa374-d39b-40e4-af8b-be7168e7df99",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the first display name when there are tied priority valid transactions",
                "fullTitle": "Test DisplayManager shouldTransition method should return the first display name when there are tied priority valid transactions",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return true;\n            }, priority: 1 }, { name: \"test3\", condition: function condition() {\n                return true;\n            }, priority: 1 }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test2\");",
                "err": {},
                "isRoot": false,
                "uuid": "cd8fb56c-ed8b-4905-b062-085a3101da3f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an invalid transaction",
                "fullTitle": "Test DisplayManager shouldTransition method should not return an invalid transaction",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmMultiVTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: [{ name: \"test2\", condition: function condition() {\n                return false;\n            }, priority: 1 }, { name: \"test3\", condition: function condition() {\n                return true;\n            }, priority: 2 }] },\n    test2: { display: dis(\"2\") }, test3: { display: dis(\"3\") } }, \"test\");\nvar start = dmMultiVTran.shouldTransition();\nassert.equal(start, \"test3\");",
                "err": {},
                "isRoot": false,
                "uuid": "d2d56442-eacd-43e4-a899-d4d14df723a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8a05ddbb-5d26-494d-8371-a7b7edce71be",
              "de574c6c-c5c4-4341-88ec-35311072e6b9",
              "fd3597f0-b84b-4432-98c3-05888005b3a3",
              "7f3fa374-d39b-40e4-af8b-be7168e7df99",
              "cd8fb56c-ed8b-4905-b062-085a3101da3f",
              "d2d56442-eacd-43e4-a899-d4d14df723a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3796d1e5-4195-4e2e-a65a-6e36fd12b6c9",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return updated display when to is not specified",
                "fullTitle": "Test DisplayManager update method should return updated display when to is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dm.update();\nassert.equal(start, \"update1\");",
                "err": {},
                "isRoot": false,
                "uuid": "94711b84-f912-44a7-b2d7-fa8d5b0acf1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return updated display when to is specified but no transition takes place",
                "fullTitle": "Test DisplayManager update method should return updated display when to is specified but no transition takes place",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmFalseTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return false;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmFalseTran.update();\nassert.equal(start, \"update1\");",
                "err": {},
                "isRoot": false,
                "uuid": "d3c3a2b1-8fb7-4fe9-97c6-b68f0fbece37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return started display of transition when a transition takes place",
                "fullTitle": "Test DisplayManager update method should return started display of transition when a transition takes place",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dmValidTran = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\"),\n        to: { name: \"test2\", condition: function condition() {\n                return true;\n            } } },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar start = dmValidTran.update();\nassert.equal(start, \"start2\");",
                "err": {},
                "isRoot": false,
                "uuid": "86221cd5-e372-4dda-8d00-8070815f352a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "94711b84-f912-44a7-b2d7-fa8d5b0acf1b",
              "d3c3a2b1-8fb7-4fe9-97c6-b68f0fbece37",
              "86221cd5-e372-4dda-8d00-8070815f352a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "23bfe39b-cfd5-4165-a887-648be6830d23",
            "title": "stop method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/DisplayManagerTest.js",
            "file": "/test/DIsplays/DisplayManagerTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return stop in display",
                "fullTitle": "Test DisplayManager stop method should return stop in display",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dm = new _DisplayManager.DisplayManager({ test: { display: dis(\"1\") },\n    test2: { display: dis(\"2\") } }, \"test\");\nvar stop = dm.stop();\nassert.equal(stop, \"stop\");",
                "err": {},
                "isRoot": false,
                "uuid": "c82359a3-7150-46de-857d-d62ae749785b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c82359a3-7150-46de-857d-d62ae749785b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bd12c85f-578b-442c-b9c9-c18e075e84ad",
        "title": "Test Flipbook Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
        "file": "/test/DIsplays/FlipbookDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9ff3b112-b892-4c58-9ac0-72c7ffa7a0a5",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the first page",
                "fullTitle": "Test Flipbook Display start method should return the first page",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([\"This is a page\"]);\nassert.equal(des.start({ tick: 0 }), \"This is a page\");",
                "err": {},
                "isRoot": false,
                "uuid": "002b58e3-5f29-4ac4-9c74-48810774aa40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return undefined if first page has delay specified",
                "fullTitle": "Test Flipbook Display start method should return undefined if first page has delay specified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 1]]);\nassert.isUndefined(des.start({ tick: 0 }));",
                "err": {},
                "isRoot": false,
                "uuid": "35f27e30-774c-4cf7-8fa6-ca5ae34f5604",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should wait ticks if first page has delay specified",
                "fullTitle": "Test Flipbook Display start method should wait ticks if first page has delay specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\nassert.isUndefined(des.start({ tick: 0 }));\nassert.equal(des.update({ tick: 2 }), \"This is a page\");",
                "err": {},
                "isRoot": false,
                "uuid": "e7023c84-92cb-4927-a252-a41cb88ffea4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "002b58e3-5f29-4ac4-9c74-48810774aa40",
              "35f27e30-774c-4cf7-8fa6-ca5ae34f5604",
              "e7023c84-92cb-4927-a252-a41cb88ffea4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "900c2f73-0523-4147-b8c7-afd4236288d1",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if instance has not been started yet",
                "fullTitle": "Test Flipbook Display update method should throw error if instance has not been started yet",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\nvar fn = function fn() {\n    return des.update({ tick: 1 });\n};\nassert.throws(fn, \"Flipbook must be started before it is updated.\");",
                "err": {},
                "isRoot": false,
                "uuid": "3e9fe9a3-4502-4992-9431-e3713073bfbd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return undefined if initial scene has not started yet",
                "fullTitle": "Test Flipbook Display update method should return undefined if initial scene has not started yet",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 2]]);\ndes.start({ tick: 0 });\nassert.isUndefined(des.update({ tick: 1 }));",
                "err": {},
                "isRoot": false,
                "uuid": "873b4ddb-c58c-4c07-9110-5b3e0c912bbe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "b6cf8dc3-ff11-4e56-9763-dd63bb2e8a13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "0c39ecc4-38f3-46a2-829b-661acdbaf952",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "e7f77734-517b-4a34-a62c-917027a8c90c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene",
                "fullTitle": "Test Flipbook Display update method should return proper scene",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "71d9f0eb-9f66-489e-b141-ce8487e259c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "54597379-2f1a-48c7-8ded-c9208e706286",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "25a6e38f-e400-45dc-949e-769fabc08327",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper scene after multiple updates",
                "fullTitle": "Test Flipbook Display update method should return proper scene after multiple updates",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "030c92bd-b4ba-4369-93b1-1f2633a2d0aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return last scene if delay is greater than last scene's delay",
                "fullTitle": "Test Flipbook Display update method should return last scene if delay is greater than last scene's delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 0], [\"This is a second page\", 10], [\"This is the last page\", 10]]);\ndes.start({ tick: 0 });\nassert.equal(des.update({ tick: 30 }), \"This is the last page\");",
                "err": {},
                "isRoot": false,
                "uuid": "03730a6c-2d0a-454b-84be-c126d48b7c7a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return last scene if in previous update last scene had been reached",
                "fullTitle": "Test Flipbook Display update method should return last scene if in previous update last scene had been reached",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var des = new _Flipbook.Flipbook([[\"This is a page\", 0], [\"This is the last page\", 10]]);\ndes.start({ tick: 0 });\ndes.update({ tick: 10 });\nassert.equal(des.update({ tick: 20 }), \"This is the last page\");",
                "err": {},
                "isRoot": false,
                "uuid": "cb9dde0a-5105-40c3-92cc-33c563c82a0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "1d6df558-6e29-421e-b8ac-985e5da51f59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "a542b569-4549-47b0-a5d6-2bb04c1024ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set proper delay",
                "fullTitle": "Test Flipbook Display update method should set proper delay",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return callback(val);",
                "err": {},
                "isRoot": false,
                "uuid": "a35336a4-ffb6-41c0-8650-37b5671ddbd5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3e9fe9a3-4502-4992-9431-e3713073bfbd",
              "873b4ddb-c58c-4c07-9110-5b3e0c912bbe",
              "b6cf8dc3-ff11-4e56-9763-dd63bb2e8a13",
              "0c39ecc4-38f3-46a2-829b-661acdbaf952",
              "e7f77734-517b-4a34-a62c-917027a8c90c",
              "71d9f0eb-9f66-489e-b141-ce8487e259c4",
              "54597379-2f1a-48c7-8ded-c9208e706286",
              "25a6e38f-e400-45dc-949e-769fabc08327",
              "030c92bd-b4ba-4369-93b1-1f2633a2d0aa",
              "03730a6c-2d0a-454b-84be-c126d48b7c7a",
              "cb9dde0a-5105-40c3-92cc-33c563c82a0a",
              "1d6df558-6e29-421e-b8ac-985e5da51f59",
              "a542b569-4549-47b0-a5d6-2bb04c1024ec",
              "a35336a4-ffb6-41c0-8650-37b5671ddbd5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fbe1545d-350c-449d-9799-5cc114f3b240",
            "title": "formatPage",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/FlipbookDisplayTest.js",
            "file": "/test/DIsplays/FlipbookDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return proper object from string",
                "fullTitle": "Test Flipbook Display formatPage should return proper object from string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = \"This is a page\";\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: page, delay: 0 });",
                "err": {},
                "isRoot": false,
                "uuid": "2d4d32f9-f9af-407a-9e47-2e5432015ba6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and array length is not 2",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and array length is not 2",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\"];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page array must have exactly 2 items.\");",
                "err": {},
                "isRoot": false,
                "uuid": "254e5629-ef25-4a3a-95b8-2d86aec57681",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and first item in array is not string",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and first item in array is not string",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [1, 2];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"is not a string. First item in page array must be a string.\");",
                "err": {},
                "isRoot": false,
                "uuid": "10636f70-788c-4ae4-9dde-fad8476e5b12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given array and second item in array is not a postive number",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given array and second item in array is not a postive number",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\", \"not a number\"];\nvar negPage = [\"This is a page\", -2];\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nvar funcneg = function funcneg() {\n    return (0, _Flipbook.formatPage)(negPage);\n};\nassert.throws(func, \"Second item in page array must be a postive number.\");\nassert.throws(funcneg, \"Second item in page array must be a postive number.\");",
                "err": {},
                "isRoot": false,
                "uuid": "06f3c0c4-95bc-4ee4-8ce9-2711b79dfc0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return proper object from array",
                "fullTitle": "Test Flipbook Display formatPage should return proper object from array",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = [\"This is a page\", 10];\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: \"This is a page\", delay: 10 });",
                "err": {},
                "isRoot": false,
                "uuid": "37845ea0-ae10-4f1b-94d9-01dc31989a62",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given object and object does not have desc property.",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given object and object does not have desc property.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { delay: 1 };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page object must have an desc property.\");",
                "err": {},
                "isRoot": false,
                "uuid": "cd624762-2321-4f07-958f-a848510c8957",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw error if given object has a delay property and it is not a postive number.",
                "fullTitle": "Test Flipbook Display formatPage should throw error if given object has a delay property and it is not a postive number.",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\", delay: \"not a number\" };\nvar negPage = { desc: \"This is a page\", delay: -1 };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nvar funcneg = function funcneg() {\n    return (0, _Flipbook.formatPage)(negPage);\n};\nassert.throws(func, \"A page object's delay property must be a postive number.\");\nassert.throws(funcneg, \"A page object's delay property must be a postive number.\");",
                "err": {},
                "isRoot": false,
                "uuid": "dd419645-8750-4963-b3f5-fe81040d539c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add delay property of 0 if object does not have delay property",
                "fullTitle": "Test Flipbook Display formatPage should add delay property of 0 if object does not have delay property",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\" };\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.equal((0, _Flipbook.formatPage)(page).delay, 0);",
                "err": {},
                "isRoot": false,
                "uuid": "25496ac0-cc5f-4f83-8f25-685cb7bd2391",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return object from object",
                "fullTitle": "Test Flipbook Display formatPage should return object from object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = { desc: \"This is a page\", delay: 10 };\nassert.deepEqual((0, _Flipbook.formatPage)(page), { desc: \"This is a page\", delay: 10 });",
                "err": {},
                "isRoot": false,
                "uuid": "2a5c169d-c2a9-4cb8-9ccf-d3ab3bf20bc8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return an error if the given argument is not an object, array, or string.",
                "fullTitle": "Test Flipbook Display formatPage should return an error if the given argument is not an object, array, or string.",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var page = 10;\nvar func = function func() {\n    return (0, _Flipbook.formatPage)(page);\n};\nassert.throws(func, \"A page should be an object, array, or string.\");",
                "err": {},
                "isRoot": false,
                "uuid": "7bc8de28-38f2-40b2-9bb9-172f755a3c99",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2d4d32f9-f9af-407a-9e47-2e5432015ba6",
              "254e5629-ef25-4a3a-95b8-2d86aec57681",
              "10636f70-788c-4ae4-9dde-fad8476e5b12",
              "06f3c0c4-95bc-4ee4-8ce9-2711b79dfc0c",
              "37845ea0-ae10-4f1b-94d9-01dc31989a62",
              "cd624762-2321-4f07-958f-a848510c8957",
              "dd419645-8750-4963-b3f5-fe81040d539c",
              "25496ac0-cc5f-4f83-8f25-685cb7bd2391",
              "2a5c169d-c2a9-4cb8-9ccf-d3ab3bf20bc8",
              "7bc8de28-38f2-40b2-9bb9-172f755a3c99"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bc00699a-b96e-4ddf-958f-8cad5a3ad880",
        "title": "Test Time Display",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
        "file": "/test/DIsplays/TimeDisplayTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ad0bf2d1-bef2-4d31-8e39-54a9483e51f5",
            "title": "constructor",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should throw error if times argument is not an object",
                "fullTitle": "Test Time Display constructor should throw error if times argument is not an object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = function func() {\n    return new _Time.Time(1);\n};\nassert.throws(func, 'times must be an object.');",
                "err": {},
                "isRoot": false,
                "uuid": "6e65873f-7291-42f4-8681-e9cbf8b9b9c7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6e65873f-7291-42f4-8681-e9cbf8b9b9c7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3808c023-4897-4080-b116-0ddfd3466da7",
            "title": "start method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return initial description if it is specified",
                "fullTitle": "Test Time Display start method should return initial description if it is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({}, \"standard desc\", \"initial desc\");\nassert.equal(dis.start(), \"initial desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "afa66f4f-9f15-4f46-abed-743371dba846",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return update based description if initial description is not specified",
                "fullTitle": "Test Time Display start method should return update based description if initial description is not specified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.start({ timeOfDay: \"morn\" }), \"This is a morning description\");",
                "err": {},
                "isRoot": false,
                "uuid": "2e70d6e0-0441-49d6-9d8d-68a6a0e0671d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "afa66f4f-9f15-4f46-abed-743371dba846",
              "2e70d6e0-0441-49d6-9d8d-68a6a0e0671d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b4bbadf2-2861-4428-a22f-5db1dd4139f6",
            "title": "update method",
            "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/DIsplays/TimeDisplayTest.js",
            "file": "/test/DIsplays/TimeDisplayTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return time-based description if that time's description is specified",
                "fullTitle": "Test Time Display update method should return time-based description if that time's description is specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update({ timeOfDay: \"morn\" }), \"This is a morning description\");",
                "err": {},
                "isRoot": false,
                "uuid": "27158393-5936-4d55-918b-24316c69cff5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the standard description if the time's description is not specified",
                "fullTitle": "Test Time Display update method should return the standard description if the time's description is not specified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update({ timeOfDay: \"noon\" }), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "9e75118d-e3ab-462f-96f5-8f8aee138ad6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the standard description if world argument is not passed",
                "fullTitle": "Test Time Display update method should return the standard description if world argument is not passed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var dis = new _Time.Time({ morn: \"This is a morning description\" }, \"standard desc\");\nassert.equal(dis.update(), \"standard desc\");",
                "err": {},
                "isRoot": false,
                "uuid": "83859afc-9bb9-4e8c-9e06-d6a47cca0441",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "27158393-5936-4d55-918b-24316c69cff5",
              "9e75118d-e3ab-462f-96f5-8f8aee138ad6",
              "83859afc-9bb9-4e8c-9e06-d6a47cca0441"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4d41c4dd-f226-44d8-ab62-31b5120dbbab",
        "title": "Reducer",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Reducers/IndexTest.js",
        "file": "/test/Reducers/IndexTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return initial state when state is not specified",
            "fullTitle": "Reducer should return initial state when state is not specified",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "_chai.assert.equal((0, _index2.default)(), _index.initialState);",
            "err": {},
            "isRoot": false,
            "uuid": "594093b7-d3e0-4e69-80e5-cd8727f3db48",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "changeRoom action should store room info",
            "fullTitle": "Reducer changeRoom action should store room info",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: actions.CHANGE_ROOM, room: _GameObjects.ROOMS.TEST, display: \"display\" };\nvar exits = [\"north\", \"south\", \"east\", \"west\"];\n_chai.assert.deepEqual((0, _index2.default)(_index.initialState, action), Object.assign({}, _index.initialState, {\n    room: _GameObjects.ROOMS.TEST, display: \"display\", exits: exits }));",
            "err": {},
            "isRoot": false,
            "uuid": "6181bc43-e246-43f2-bf21-e3ace391e048",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "changeDisplay action should store display info",
            "fullTitle": "Reducer changeDisplay action should store display info",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: actions.CHANGE_DISPLAY, display: \"display\" };\n_chai.assert.deepEqual((0, _index2.default)(_index.initialState, action), Object.assign({}, _index.initialState, {\n    display: \"display\" }));",
            "err": {},
            "isRoot": false,
            "uuid": "59f110ab-f8dc-4f14-9465-811c2e110143",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "updateTick action should store new tick in world state",
            "fullTitle": "Reducer updateTick action should store new tick in world state",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var action = { type: actions.UPDATE_TICK, tick: 10 };\n_chai.assert.deepEqual((0, _index2.default)(_index.initialState, action), Object.assign({}, _index.initialState, {\n    world: Object.assign({}, _index.initialState.world, { tick: 10 }) }));",
            "err": {},
            "isRoot": false,
            "uuid": "bb212e9c-39b1-4de1-a7ad-d544fcbdad25",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "594093b7-d3e0-4e69-80e5-cd8727f3db48",
          "6181bc43-e246-43f2-bf21-e3ace391e048",
          "59f110ab-f8dc-4f14-9465-811c2e110143",
          "bb212e9c-39b1-4de1-a7ad-d544fcbdad25"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c1b378b0-d0b6-4ff0-a6a2-d27930802049",
        "title": "genExits",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/Reducers/genExitsTest.js",
        "file": "/test/Reducers/genExitsTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return unchanged state if room is not specified in the action",
            "fullTitle": "genExits should return unchanged state if room is not specified in the action",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var state = { key: \"value\", exits: undefined };\n_chai.assert.equal((0, _genExits2.default)(state, {}), state);",
            "err": {},
            "isRoot": false,
            "uuid": "85125a14-d01c-4121-ba94-11a01c91a692",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should convert room object values to array",
            "fullTitle": "genExits should convert room object values to array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var state = { key: \"value\", exits: undefined };\n_chai.assert.deepEqual((0, _genExits2.default)(state, { room: _GameObjects.ROOMS.TEST }), Object.assign({}, state, { exits: [\"north\", \"south\", \"east\", \"west\"] }));",
            "err": {},
            "isRoot": false,
            "uuid": "95d2296a-a2c5-4079-a530-d394560a92a5",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "85125a14-d01c-4121-ba94-11a01c91a692",
          "95d2296a-a2c5-4079-a530-d394560a92a5"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1e899c78-4d57-40dd-8431-8ba636785068",
        "title": "Tests configured",
        "fullFile": "/home/dawn/Documents/Javascript projects/text-adventure/test/setupTests.js",
        "file": "/test/setupTests.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "",
            "fullTitle": "Tests configured ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return true;",
            "err": {},
            "isRoot": false,
            "uuid": "ad42f2d6-4735-43a1-aec1-c8e5201a429c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ad42f2d6-4735-43a1-aec1-c8e5201a429c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}